<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Chamsii Mouhib</title><link>https://chxmxii.github.io/portfolio/posts/</link><description>Recent content in Posts on Chamsii Mouhib</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 22 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://chxmxii.github.io/portfolio/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>KodeKloud Engineer System Administration Challenges - P2</title><link>https://chxmxii.github.io/portfolio/posts/2023/06/kodekloud-engineer-system-administration-challenges-p2/</link><pubDate>Thu, 22 Jun 2023 00:00:00 +0000</pubDate><guid>https://chxmxii.github.io/portfolio/posts/2023/06/kodekloud-engineer-system-administration-challenges-p2/</guid><description>Web Server Security During a recent security audit, the application security team of xFusionCorp Industries found security issues with the Apache web server on Nautilus App Server 1 server in Stratos DC. They have listed several security issues that need to be fixed on this server. Please apply the security settings below: a. On Nautilus App Server 1 it was identified that the Apache web server is exposing the version number.</description><content type="html"><![CDATA[<hr>
<h2 id="web-server-security">Web Server Security</h2>
<ul>
<li>During a recent security audit, the application security team of xFusionCorp Industries found security issues with the Apache web server on Nautilus App Server 1 server in Stratos DC. They have listed several security issues that need to be fixed on this server. Please apply the security settings below:</li>
<li>a. On Nautilus App Server 1 it was identified that the Apache web server is exposing the version number. Ensure this server has the appropriate settings to hide the version number of the Apache web server.</li>
<li>b. There is a website hosted under /var/www/html/blog on App Server 1. It was detected that the directory /blog lists all of its contents while browsing the URL. Disable the directory browser listing in Apache config.</li>
<li>c. Also make sure to restart the Apache service after making the changes.</li>
</ul>
<h6 id="solution">Solution</h6>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Shell" data-lang="Shell"><span style="display:flex;"><span><span style="color:#75715e">#ssh to the app server 1</span>
</span></span><span style="display:flex;"><span>sshpass -p Ir0nM@n -o StrictHostKeyChecking<span style="color:#f92672">=</span>no tony@stapp01
</span></span><span style="display:flex;"><span><span style="color:#75715e">#check the httpd status</span>
</span></span><span style="display:flex;"><span>sudo systemctl status httpd
</span></span><span style="display:flex;"><span><span style="color:#75715e">#open the httpd.conf file with vi</span>
</span></span><span style="display:flex;"><span>sudo vi /etc/httpd/conf/httpd.conf
</span></span><span style="display:flex;"><span><span style="color:#75715e">#a. to disable the version discolusre you can append the following two lines to the httpd.conf</span>
</span></span><span style="display:flex;"><span>.&gt; ServerTokens Prod
</span></span><span style="display:flex;"><span>.&gt; ServerSignature Off
</span></span><span style="display:flex;"><span><span style="color:#75715e">#b. to disable the directory browser listing, make sure to remove Indexes from options</span>
</span></span><span style="display:flex;"><span>Before &gt; Options Indexes FollowSymLinks
</span></span><span style="display:flex;"><span>After &gt; Options FollowSymLinks
</span></span><span style="display:flex;"><span><span style="color:#75715e">#save and quit</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#c. restart the server and curl to verify</span>
</span></span><span style="display:flex;"><span>sudo systemctl start httpd <span style="color:#f92672">&amp;&amp;</span> sudo systemctl status httpd
</span></span><span style="display:flex;"><span>curl -I stapp01:8080/
</span></span><span style="display:flex;"><span><span style="color:#75715e">#TIP: you can press &#34;/&#34; and write &#34;Options&#34; in vi to search for that line. press n to move to the next matched item.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#ref: https://www.tecmint.com/hide-apache-web-server-version-information/</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#ref: https://stackoverflow.com/questions/2530372/how-do-i-disable-directory-browsing</span>
</span></span></code></pre></div></li>
</ul>
<hr>
<h2 id="configure-local-yum-repos">Configure Local Yum repos</h2>
<ul>
<li>The Nautilus production support team and security team had a meeting last month in which they decided to use local yum repositories for maintaing packages needed for their servers. For now they have decided to configure a local yum repo on Nautilus Backup Server. This is one of the pending items from last month, so please configure a local yum repository on Nautilus Backup Server as per details given below.</li>
<li>a. We have some packages already present at location /packages/downloaded_rpms/ on Nautilus Backup Server.</li>
<li>b. Create a yum repo named epel_local and make sure to set Repository ID to epel_local. Configure it to use package&rsquo;s location /packages/downloaded_rpms/.</li>
<li>c. Install package vim-enhanced from this newly created repo.</li>
</ul>
<h6 id="solution-1">Solution:</h6>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Shell" data-lang="Shell"><span style="display:flex;"><span><span style="color:#75715e">#Connect to the backup server</span>
</span></span><span style="display:flex;"><span>sshpass -p H@wk3y3	ssh -o StrictHostKeyChecking<span style="color:#f92672">=</span>no clint@stbkp01
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Switch to the root user</span>
</span></span><span style="display:flex;"><span>sudo su -
</span></span><span style="display:flex;"><span><span style="color:#75715e">#there is actually 2 ways to create yum repos, either you do it manually or you can do it with &#34;yum-config-manager --add-repo=&lt;url&gt;&#34;</span>
</span></span><span style="display:flex;"><span>cat &lt;&lt;<span style="color:#ae81ff">\ </span>EOF &gt; /etc/yum_repos.d/epel_local.repo
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>epel_local<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>name<span style="color:#f92672">=</span>epel_local
</span></span><span style="display:flex;"><span>baseurl<span style="color:#f92672">=</span>file:///packages/downloaded_rpms/
</span></span><span style="display:flex;"><span>enabled<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>gpgcheck<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>EOF
</span></span><span style="display:flex;"><span><span style="color:#75715e">#clean and list the repos</span>
</span></span><span style="display:flex;"><span>yum clean all
</span></span><span style="display:flex;"><span>yum repo list
</span></span><span style="display:flex;"><span><span style="color:#75715e">#install the vim-enhanced</span>
</span></span><span style="display:flex;"><span>yum install vim-enhanced -y
</span></span></code></pre></div></li>
</ul>
<hr>
<h2 id="setup-ssl-for-nginx">Setup SSL for Nginx</h2>
<ul>
<li>The system admins team of xFusionCorp Industries needs to deploy a new application on App Server 1 in Stratos Datacenter. They have some pre-requites to get ready that server for application deployment. Prepare the server as per requirements shared below:</li>
<li>Install and configure nginx on App Server 1.</li>
<li>On App Server 1 there is a self signed SSL certificate and key present at location /tmp/nautilus.crt and /tmp/nautilus.key. Move them to some appropriate location and deploy the same in Nginx.</li>
<li>Create an index.html file with content Welcome! under Nginx document root.</li>
<li>For final testing try to access the App Server 2 link (either hostname or IP) from jump host using curl command. For example curl -Ik https://<!-- raw HTML omitted -->/.</li>
</ul>
<h6 id="solution-2">Solution</h6>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Shell" data-lang="Shell"><span style="display:flex;"><span><span style="color:#75715e">#ssh to the app server 1</span>
</span></span><span style="display:flex;"><span>sshpass -p Ir0nM@n ssh -o StrictHostKeyChecking<span style="color:#f92672">=</span>no tony@stapp01
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Switch to root user</span>
</span></span><span style="display:flex;"><span>sudo su -
</span></span><span style="display:flex;"><span><span style="color:#75715e">#search for the nginx package</span>
</span></span><span style="display:flex;"><span>yum whatprovides nginx
</span></span><span style="display:flex;"><span>yum search nginx
</span></span><span style="display:flex;"><span><span style="color:#75715e">#install epel-release &amp; nginx</span>
</span></span><span style="display:flex;"><span>yum install epel-release -y
</span></span><span style="display:flex;"><span>yum install nginx
</span></span><span style="display:flex;"><span><span style="color:#75715e">#copy the self-signed cert</span>
</span></span><span style="display:flex;"><span>cp /tmp/nautilus.crt /etc/pki/CA/certs/ <span style="color:#f92672">&amp;&amp;</span> cp /tmp/nautilus.key /etc/pki/CA/private/
</span></span></code></pre></div>edit the /etc/nginx/nginx.conf to look like this</li>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Shell" data-lang="Shell"><span style="display:flex;"><span><span style="color:#75715e">#For more information on configuration, see:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#* Official English Documentation: http://nginx.org/en/docs/</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#* Official Russian Documentation: http://nginx.org/ru/docs/</span>
</span></span><span style="display:flex;"><span>user nginx;
</span></span><span style="display:flex;"><span>worker_processes auto;
</span></span><span style="display:flex;"><span>error_log /var/log/nginx/error.log;
</span></span><span style="display:flex;"><span>pid /run/nginx.pid;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.</span>
</span></span><span style="display:flex;"><span>include /usr/share/nginx/modules/*.conf;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>events <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    worker_connections 1024;
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>http <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    log_format  main  <span style="color:#e6db74">&#39;$remote_addr - $remote_user [$time_local] &#34;$request&#34; &#39;</span>
</span></span><span style="display:flex;"><span>                      <span style="color:#e6db74">&#39;$status $body_bytes_sent &#34;$http_referer&#34; &#39;</span>
</span></span><span style="display:flex;"><span>                      <span style="color:#e6db74">&#39;&#34;$http_user_agent&#34; &#34;$http_x_forwarded_for&#34;&#39;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    access_log  /var/log/nginx/access.log  main;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    sendfile            on;
</span></span><span style="display:flex;"><span>    tcp_nopush          on;
</span></span><span style="display:flex;"><span>    tcp_nodelay         on;
</span></span><span style="display:flex;"><span>    keepalive_timeout   65;
</span></span><span style="display:flex;"><span>    types_hash_max_size 4096;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    include             /etc/nginx/mime.types;
</span></span><span style="display:flex;"><span>    default_type        application/octet-stream;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Load modular configuration files from the /etc/nginx/conf.d directory.</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># See http://nginx.org/en/docs/ngx_core_module.html#include</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># for more information.</span>
</span></span><span style="display:flex;"><span>    include /etc/nginx/conf.d/*.conf;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    server <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        listen       80;
</span></span><span style="display:flex;"><span>        listen       <span style="color:#f92672">[</span>::<span style="color:#f92672">]</span>:80;
</span></span><span style="display:flex;"><span>        server_name  &lt;your_server_ip_here&gt;;
</span></span><span style="display:flex;"><span>        root         /usr/share/nginx/html;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Load configuration files for the default server block.</span>
</span></span><span style="display:flex;"><span>        include /etc/nginx/default.d/*.conf;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        error_page <span style="color:#ae81ff">404</span> /404.html;
</span></span><span style="display:flex;"><span>        location <span style="color:#f92672">=</span> /404.html <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        error_page <span style="color:#ae81ff">500</span> <span style="color:#ae81ff">502</span> <span style="color:#ae81ff">503</span> <span style="color:#ae81ff">504</span> /50x.html;
</span></span><span style="display:flex;"><span>        location <span style="color:#f92672">=</span> /50x.html <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Settings for a TLS enabled server.</span>
</span></span><span style="display:flex;"><span>    server <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        listen       <span style="color:#ae81ff">443</span> ssl http2;
</span></span><span style="display:flex;"><span>        listen       <span style="color:#f92672">[</span>::<span style="color:#f92672">]</span>:443 ssl http2;
</span></span><span style="display:flex;"><span>        server_name  &lt;your_server_ip_from_here&gt;;
</span></span><span style="display:flex;"><span>        root         /usr/share/nginx/html;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        ssl_certificate <span style="color:#e6db74">&#34;/etc/pki/CA/certs/nautilus.crt&#34;</span>;
</span></span><span style="display:flex;"><span>        ssl_certificate_key <span style="color:#e6db74">&#34;/etc/pki/CA/private/nautilus.key&#34;</span>;
</span></span><span style="display:flex;"><span>        ssl_session_cache shared:SSL:1m;
</span></span><span style="display:flex;"><span>        ssl_session_timeout  10m;
</span></span><span style="display:flex;"><span>        ssl_ciphers HIGH:!aNULL:!MD5;
</span></span><span style="display:flex;"><span>        ssl_prefer_server_ciphers on;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Load configuration files for the default server block.</span>
</span></span><span style="display:flex;"><span>        include /etc/nginx/default.d/*.conf;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        error_page <span style="color:#ae81ff">404</span> /404.html;
</span></span><span style="display:flex;"><span>            location <span style="color:#f92672">=</span> /40x.html <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        error_page <span style="color:#ae81ff">500</span> <span style="color:#ae81ff">502</span> <span style="color:#ae81ff">503</span> <span style="color:#ae81ff">504</span> /50x.html;
</span></span><span style="display:flex;"><span>            location <span style="color:#f92672">=</span> /50x.html <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span></code></pre></div>Now lets add index.html file and start the nginx service</li>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Shell" data-lang="Shell"><span style="display:flex;"><span><span style="color:#75715e">#Now, you will have to remove the index.html under the nginx root because is linked to another file.</span>
</span></span><span style="display:flex;"><span>rm -rf /usr/share/nginx/html/index.html
</span></span><span style="display:flex;"><span><span style="color:#75715e">#create new index.html under nginx root contains &#34;welcome!&#34;</span>
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;Welcome!&#34;</span> &gt; /usr/share/nginx/html/index.html
</span></span><span style="display:flex;"><span><span style="color:#75715e">#start nginx </span>
</span></span><span style="display:flex;"><span>systemctl start nginx
</span></span><span style="display:flex;"><span>systemctl status
</span></span><span style="display:flex;"><span><span style="color:#75715e">#verify</span>
</span></span><span style="display:flex;"><span>curl localhot
</span></span><span style="display:flex;"><span><span style="color:#75715e">#going back to the jump host lets curl</span>
</span></span><span style="display:flex;"><span>curl -Ik https://172.16.238.10	
</span></span><span style="display:flex;"><span>curl -k https://172.16.238.10
</span></span></code></pre></div><hr>
</li>
</ul>
<h2 id="application-security">Application Security</h2>
<ul>
<li>We have a backup management application UI hosted on Nautilus backup server in Stratos DC. That backup management application code is deployed under Apache on the backup server itself, and Nginx is running as a reverse proxy on the same server. Apache and Nginx ports are 6100 and 8093, respectively. We have iptables firewall installed on this server. Make the appropriate changes to fulfill the requirements mentioned below:</li>
<li>a. We want to open all incoming connections to Nginx&rsquo;s port and block all incoming connections to Apache&rsquo;s port. Also make sure rules are permanent.</li>
</ul>
<h6 id="solution-3">Solution:</h6>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Shell" data-lang="Shell"><span style="display:flex;"><span><span style="color:#75715e">#ssh to the backup server</span>
</span></span><span style="display:flex;"><span>sshpass -p H@wk3y3 ssh -o StrictHostKeyChecking<span style="color:#f92672">=</span>no clint@stbkp01
</span></span><span style="display:flex;"><span><span style="color:#75715e">#switch to root user</span>
</span></span><span style="display:flex;"><span>sudo su -
</span></span><span style="display:flex;"><span><span style="color:#75715e">#verify the ports of nginx and apache</span>
</span></span><span style="display:flex;"><span>ss -lntp | grep nginx
</span></span><span style="display:flex;"><span>ss -lntp | grep http
</span></span><span style="display:flex;"><span><span style="color:#75715e">#configure the firewall to match the desired behavior</span>
</span></span><span style="display:flex;"><span>iptables -A INPUT -p tcp --dport <span style="color:#ae81ff">8093</span> -m conntrack --cstate NEW,ESTABLISHED -j ACCEPT
</span></span><span style="display:flex;"><span>iptables -A INPUT -p tcp --dport <span style="color:#ae81ff">6100</span> -m conntrack --cstate NEW -j REJECT
</span></span><span style="display:flex;"><span><span style="color:#75715e">#save the rules to remain permanent</span>
</span></span><span style="display:flex;"><span>sudo iptables-save &gt; /etc/sysconfig/iptables
</span></span><span style="display:flex;"><span>service iptables save
</span></span><span style="display:flex;"><span><span style="color:#75715e">#veriffy</span>
</span></span><span style="display:flex;"><span>cat /etc/sysconfig/iptables
</span></span><span style="display:flex;"><span>iptables -L -n -v
</span></span><span style="display:flex;"><span><span style="color:#75715e">#verify from jump host</span>
</span></span><span style="display:flex;"><span>telnet stkbp01 <span style="color:#ae81ff">8093</span>
</span></span><span style="display:flex;"><span>telnet stkbp01 <span style="color:#ae81ff">6100</span>
</span></span></code></pre></div></li>
</ul>
<hr>
<h2 id="bash-script">Bash Script</h2>
<ul>
<li>The production support team of xFusionCorp Industries is working on developing some bash scripts to automate different day to day tasks. One is to create a bash script for taking websites backup. They have a static website running on App Server 1 in Stratos Datacenter, and they need to create a bash script named official_backup.sh which should accomplish the following tasks. (Also remember to place the script under /scripts directory on App Server 1)</li>
<li>a. Create a zip archive named xfusioncorp_official.zip of /var/www/html/official directory.</li>
<li>b. Save the archive in /backup/ on App Server 1. This is a temporary storage, as backups from this location will be clean on weekly basis. Therefore, we also need to save this backup archive on Nautilus Backup Server.</li>
<li>c. Copy the created archive to Nautilus Backup Server server in /backup/ location.</li>
<li>d. Please make sure script won&rsquo;t ask for password while copying the archive file. Additionally, the respective server user (for example, tony in case of App Server 1) must be able to run it.</li>
</ul>
<h6 id="solution-4">Solution:</h6>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Shell" data-lang="Shell"><span style="display:flex;"><span><span style="color:#75715e">#ssh to app server 1</span>
</span></span><span style="display:flex;"><span>sshpass -p Ir0nM@n ssh -o StrictHostKeyChecking<span style="color:#f92672">=</span>no tony@stapp01
</span></span><span style="display:flex;"><span><span style="color:#75715e">#cd to /scripts folder and create a official_backup.sh file</span>
</span></span><span style="display:flex;"><span>cd /scripts
</span></span><span style="display:flex;"><span>vi official_backup.sh
</span></span></code></pre></div>After opening the officila_backup.sh file, copy the following script, save and quit.</li>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Shell" data-lang="Shell"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e">#make an archive for the official folder under /var/www/html/ &#34;-r for recurisve&#34; </span>
</span></span><span style="display:flex;"><span>zip -r /backup/xfusioncorp_official.zip /var/www/html/official
</span></span><span style="display:flex;"><span><span style="color:#75715e">#copy the archive file to the backup server</span>
</span></span><span style="display:flex;"><span>scp /backup/xfusioncorp_official.zip clint@stbkp01:/backup/
</span></span></code></pre></div>now, to make sure the script won&rsquo;t ask for password while copying the archive file, lets generate a ssh key</li>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e">#generate an ssh key</span>
</span></span><span style="display:flex;"><span>ssh-keygen
</span></span><span style="display:flex;"><span><span style="color:#75715e">#copy the generated key to the backup server</span>
</span></span><span style="display:flex;"><span>ssh-copy-id clint@stbkp01
</span></span><span style="display:flex;"><span><span style="color:#75715e">#ssh to verify</span>
</span></span><span style="display:flex;"><span>ssh clint@stkp01
</span></span><span style="display:flex;"><span><span style="color:#75715e">#add exec perm to the official_backup.sh file</span>
</span></span><span style="display:flex;"><span>chmod +x official_backup.sh
</span></span><span style="display:flex;"><span><span style="color:#75715e">#run the script</span>
</span></span><span style="display:flex;"><span>./official_backup
</span></span><span style="display:flex;"><span><span style="color:#75715e">#ssh to backserver and verify</span>
</span></span><span style="display:flex;"><span>ssh clint@stkp01
</span></span><span style="display:flex;"><span>ls /backup/
</span></span></code></pre></div></li>
</ul>
<hr>
<h2 id="linux-configure-sudo">Linux Configure sudo</h2>
<ul>
<li>We have some users on all app servers in Stratos Datacenter. Some of them have been assigned some new roles and responsibilities, therefore their users need to be upgraded with sudo access so that they can perform admin level tasks.</li>
<li>a. Provide sudo access to user james on all app servers.</li>
<li>b. Make sure you have set up password-less sudo for the user.</li>
</ul>
<h6 id="solution-">Solution :</h6>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Shell" data-lang="Shell"><span style="display:flex;"><span><span style="color:#75715e">#ssh to all app servers one by one</span>
</span></span><span style="display:flex;"><span>ssh -p &lt;password&gt; ssh -o StrictHostKeyChecking<span style="color:#f92672">=</span>no &lt;name&gt;@&lt;hostname&gt;
</span></span><span style="display:flex;"><span><span style="color:#75715e">#switch to root user</span>
</span></span><span style="display:flex;"><span>sudo su -
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Provide sudo access to user james</span>
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;james ALL=(ALL) NOPASSWD:ALL&#34;</span> &gt; /etc/sudoer.d/james
</span></span><span style="display:flex;"><span><span style="color:#75715e">#verify</span>
</span></span><span style="display:flex;"><span>su james
</span></span><span style="display:flex;"><span>sudo id
</span></span><span style="display:flex;"><span>sudo su
</span></span></code></pre></div></li>
</ul>
<hr>
<h2 id="apache-redirects">Apache Redirects</h2>
<ul>
<li>The Nautilus devops team got some requirements related to some Apache config changes. They need to setup some redirects for some URLs. There might be some more changes need to be done. Below you can find more details regarding that:</li>
<li>httpd is already installed on app server 3. Configure Apache to listen on port 5003.</li>
<li>Configure Apache to add some redirects as mentioned below:
a.) Redirect <a href="http://stapp03.stratos.xfusioncorp.com">http://stapp03.stratos.xfusioncorp.com</a>:<!-- raw HTML omitted -->/ to <a href="http://www.stapp03.stratos.xfusioncorp.com">http://www.stapp03.stratos.xfusioncorp.com</a>:<!-- raw HTML omitted -->/ i.e non www to www. This must be a permanent redirect i.e 301
b.) Redirect <a href="http://www.stapp03.stratos.xfusioncorp.com">http://www.stapp03.stratos.xfusioncorp.com</a>:<!-- raw HTML omitted -->/blog/ to <a href="http://www.stapp03.stratos.xfusioncorp.com">http://www.stapp03.stratos.xfusioncorp.com</a>:<!-- raw HTML omitted -->/news/. This must be a temporary redirect i.e 302.</li>
</ul>
<h6 id="solution--1">Solution :</h6>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Shell" data-lang="Shell"><span style="display:flex;"><span><span style="color:#75715e">#ssh to app server 3</span>
</span></span><span style="display:flex;"><span>sshpass -p BigGr33n ssh -o StrictHostKeyChecking<span style="color:#f92672">=</span>no banner@stapp03
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Switch to the root user</span>
</span></span><span style="display:flex;"><span>sudo su -
</span></span><span style="display:flex;"><span><span style="color:#75715e">#verify httpd is alr installed</span>
</span></span><span style="display:flex;"><span>rpm -qa | grep httpd
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Configure apache to listen on port 5003</span>
</span></span><span style="display:flex;"><span>vi /etc/httpd/conf/httpd.conf
</span></span><span style="display:flex;"><span>Look <span style="color:#66d9ef">for</span> the line that starts with Listen and change it to &gt; Listen <span style="color:#ae81ff">5003</span>
</span></span></code></pre></div>Configure redirection</li>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Shell" data-lang="Shell"><span style="display:flex;"><span>vi /etc/httpd/conf.d/main.conf
</span></span><span style="display:flex;"><span><span style="color:#75715e">#copy the following lines</span>
</span></span><span style="display:flex;"><span>&lt;VirtualHost *:5003&gt;
</span></span><span style="display:flex;"><span>ServerName http://stapp03.stratos.xfusioncorp.com:5003/
</span></span><span style="display:flex;"><span>Redirect <span style="color:#ae81ff">301</span> /  http://www.stapp03.stratos.xfusioncorp.com:5003/
</span></span><span style="display:flex;"><span>&lt;/VirtualHost&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&lt;VirtualHost *:5003&gt;
</span></span><span style="display:flex;"><span>ServerName http://www.stapp03.stratos.xfusioncorp.com:5003/blog/
</span></span><span style="display:flex;"><span>Redirect <span style="color:#ae81ff">302</span> / http://www.stapp03.stratos.xfusioncorp.com:5003/news/
</span></span><span style="display:flex;"><span>&lt;/VirtualHost&gt;
</span></span></code></pre></div></li>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Shell" data-lang="Shell"><span style="display:flex;"><span><span style="color:#75715e">#Restart htttpd</span>
</span></span><span style="display:flex;"><span>systemctl restartd httpd
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Verify </span>
</span></span><span style="display:flex;"><span>curl http://stapp03.stratos.xfusioncorp.com:5003/
</span></span><span style="display:flex;"><span>curl http://www.stapp03.stratos.xfusioncorp.com:5003/
</span></span><span style="display:flex;"><span>curl http://www.stapp03.stratos.xfusioncorp.com:5003/blog/
</span></span><span style="display:flex;"><span>curl http://www.stapp03.stratos.xfusioncorp.com:5003/news
</span></span></code></pre></div></li>
</ul>
<hr>
<h2 id="linux-gpg-encryption">Linux GPG Encryption</h2>
<ul>
<li>We have confidential data that needs to be transferred to a remote location, so we need to encrypt that data.We also need to decrypt data we received from a remote location in order to understand its content.</li>
<li>On storage server in Stratos Datacenter we have private and public keys stored /home/*_key.asc. Use those keys to perform the following actions.</li>
<li>Encrypt /home/encrypt_me.txt to /home/encrypted_me.asc.</li>
<li>Decrypt /home/decrypt_me.asc to /home/decrypted_me.txt. (Passphrase for decryption and encryption is kodekloud).</li>
</ul>
<h6 id="solution-5">Solution</h6>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Shell" data-lang="Shell"><span style="display:flex;"><span><span style="color:#75715e">#ssh to the storage server</span>
</span></span><span style="display:flex;"><span>sshpass -p Bl@ckW ssh -o StrictHostKeyChecking<span style="color:#f92672">=</span>no natasha@ststor01
</span></span><span style="display:flex;"><span><span style="color:#75715e">#swith to the root user</span>
</span></span><span style="display:flex;"><span>sudo su -
</span></span><span style="display:flex;"><span><span style="color:#75715e">#check for the keys</span>
</span></span><span style="display:flex;"><span>ls /home/
</span></span><span style="display:flex;"><span>cat /home/encrypt_me.txt
</span></span><span style="display:flex;"><span>cat /home/decrypt_me
</span></span><span style="display:flex;"><span>cd /home
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Import the keys </span>
</span></span><span style="display:flex;"><span>gpg --import public_key.asc
</span></span><span style="display:flex;"><span>gpg --import private_key.asc
</span></span><span style="display:flex;"><span><span style="color:#75715e">#verify</span>
</span></span><span style="display:flex;"><span>gpg --list-keys
</span></span><span style="display:flex;"><span>gpg --list-secret-keys
</span></span><span style="display:flex;"><span><span style="color:#75715e">#encryp the encrypt_me.txt file</span>
</span></span><span style="display:flex;"><span>gpg --encrypt -r kodekloud@kodekloud.com --armor &lt; encrypt_me.txt -o encrypted_me.asc
</span></span><span style="display:flex;"><span><span style="color:#75715e">#decrypt the message, you will be prompted with a passphrase which is &#34;kodekloud&#34;</span>
</span></span><span style="display:flex;"><span>gpg --decrypt decrypt_me.asc &gt; decrypted_me.txt
</span></span><span style="display:flex;"><span><span style="color:#75715e">#validate</span>
</span></span><span style="display:flex;"><span>cat decrypted_me.txt
</span></span><span style="display:flex;"><span>cat decrypt_me.asc
</span></span><span style="display:flex;"><span>cat encrypt_me.txt
</span></span><span style="display:flex;"><span>cat encrpyed_me.asc
</span></span></code></pre></div></li>
</ul>
<hr>
<h2 id="linux-logrotate">Linux LogRotate</h2>
<ul>
<li>The Nautilus DevOps team is ready to launch a new application, which they will deploy on app servers in Stratos Datacenter. They are expecting significant traffic/usage of httpd on app servers after that. This will generate massive logs, creating huge log files. To utilise the storage efficiently, they need to compress the log files and need to rotate old logs. Check the requirements shared below:</li>
<li>a. In all app servers install httpd package.</li>
<li>b. Using logrotate configure httpd logs rotation to monthly and keep only 3 rotated logs.
(If by default log rotation is set, then please update configuration as needed)</li>
</ul>
<h6 id="solution--2">Solution :</h6>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Shell" data-lang="Shell"><span style="display:flex;"><span><span style="color:#75715e">#ssh to the app server</span>
</span></span><span style="display:flex;"><span>sshpass -p &lt;passwd&gt; ssh -o StrictHostKeyChecking<span style="color:#f92672">=</span>no &lt;user&gt;@&lt;hostname&gt;
</span></span><span style="display:flex;"><span><span style="color:#75715e">#switch to root user</span>
</span></span><span style="display:flex;"><span>sudo su -
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Install httpd package</span>
</span></span><span style="display:flex;"><span>yum install httpd -y
</span></span><span style="display:flex;"><span><span style="color:#75715e">#configure logrotate to rotate httpd logs</span>
</span></span><span style="display:flex;"><span>vi /etc/logrotate.d/http
</span></span><span style="display:flex;"><span><span style="color:#75715e">#start httpd service</span>
</span></span><span style="display:flex;"><span>systemctl start httpd
</span></span><span style="display:flex;"><span>systemctl status httpd
</span></span></code></pre></div>copy this into the http file under logrotate.d/
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Shell" data-lang="Shell"><span style="display:flex;"><span>/var/log/httpd/*log <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  monthly
</span></span><span style="display:flex;"><span>  missingok
</span></span><span style="display:flex;"><span>  rotate <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>  notifempty
</span></span><span style="display:flex;"><span>  sharedscripts
</span></span><span style="display:flex;"><span>  compress
</span></span><span style="display:flex;"><span>  postrotate
</span></span><span style="display:flex;"><span>      /bin/systemctl reload httpd.service &gt; /dev/null 2&gt;/dev/null <span style="color:#f92672">||</span> true
</span></span><span style="display:flex;"><span>  endscript
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div></li>
</ul>
<hr>
<h2 id="apache-heading">Apache heading</h2>
<ul>
<li>We are working on hardening Apache web server on all app servers. As a part of this process we want to add some of the Apache response headers for security purpose. We are testing the settings one by one on all app servers. As per details mentioned below enable these headers for Apache:</li>
<li>Install httpd package on App Server 3 using yum and configure it to run on 3003 port, make sure to start its service.</li>
<li>Create an index.html file under Apache&rsquo;s default document root i.e /var/www/html and add below given content in it.</li>
<li>Welcome to the xFusionCorp Industries!</li>
<li>Configure Apache to enable below mentioned headers:</li>
<li>X-XSS-Protection header with value 1; mode=block</li>
<li>X-Frame-Options header with value SAMEORIGIN</li>
<li>X-Content-Type-Options header with value nosniff
=&gt; Note: You can test using curl on the given app server as LBR URL will not work for this task</li>
</ul>
<h6 id="solution-6">Solution:</h6>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Shell" data-lang="Shell"><span style="display:flex;"><span><span style="color:#75715e">#ssh to server app 3</span>
</span></span><span style="display:flex;"><span>sshpass -p BigGr33n ssh -o StrictHostKeyChecking<span style="color:#f92672">=</span>no ssh banner@stapp03
</span></span><span style="display:flex;"><span><span style="color:#75715e">#switch to root user</span>
</span></span><span style="display:flex;"><span>sudo su -
</span></span><span style="display:flex;"><span><span style="color:#75715e">#install httpd</span>
</span></span><span style="display:flex;"><span>yum install httpd -y
</span></span><span style="display:flex;"><span><span style="color:#75715e">#configure httpd to listen on port 3003, and enable the mentioned headers</span>
</span></span><span style="display:flex;"><span>vi /etc/httpd/conf/httpd.conf
</span></span><span style="display:flex;"><span>EDIT &gt; Listen <span style="color:#ae81ff">3003</span>
</span></span><span style="display:flex;"><span>INSERT &gt; Header set X-XSS-Protection <span style="color:#e6db74">&#34;1; mode=block&#34;</span>
</span></span><span style="display:flex;"><span>INSERT &gt; Header set X-Content-Type-Options nosniff
</span></span><span style="display:flex;"><span>INSERT &gt; Header always append X-Frame-Options SAMEORIGIN
</span></span><span style="display:flex;"><span><span style="color:#75715e">#create index.html</span>
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;Welcome to the xFusionCorp Industries!&#34;</span> &gt; /var/www/html/index.html
</span></span><span style="display:flex;"><span><span style="color:#75715e">#start the http service</span>
</span></span><span style="display:flex;"><span>systemctl start httpd
</span></span><span style="display:flex;"><span>systemctl status httpd
</span></span><span style="display:flex;"><span><span style="color:#75715e">#verify</span>
</span></span><span style="display:flex;"><span>curl -i localhost:3003
</span></span><span style="display:flex;"><span><span style="color:#75715e">#verify again from jumphost</span>
</span></span><span style="display:flex;"><span>curl -i http://stapp03:3003
</span></span></code></pre></div></li>
</ul>
<hr>
<h2 id="install-package">Install package</h2>
<ul>
<li>As per new application requirements shared by the Nautilus project development team, serveral new packages need to be installed on all app servers in Stratos Datacenter. Most of them are completed except for git.</li>
<li>Therefore, install the git package on all app-servers.</li>
</ul>
<h6 id="solution-7">Solution</h6>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Shell" data-lang="Shell"><span style="display:flex;"><span><span style="color:#75715e">#ssh to app server 1,2 and 3</span>
</span></span><span style="display:flex;"><span>sshpass -p &lt;pass&gt; ssh -o StrictHostKeyChecking<span style="color:#f92672">=</span>no &lt;user&gt;@&lt;hostname&gt;
</span></span><span style="display:flex;"><span><span style="color:#75715e">#switch to the root user</span>
</span></span><span style="display:flex;"><span>sudo su -
</span></span><span style="display:flex;"><span><span style="color:#75715e">#list all the installed packages</span>
</span></span><span style="display:flex;"><span>rpm -qa | grep git
</span></span><span style="display:flex;"><span><span style="color:#75715e">#install git</span>
</span></span><span style="display:flex;"><span>yum install git -y
</span></span><span style="display:flex;"><span><span style="color:#75715e">#verify</span>
</span></span><span style="display:flex;"><span>yum list installed | grep git
</span></span><span style="display:flex;"><span>git version
</span></span></code></pre></div></li>
</ul>
<hr>
<h2 id="linux-find-command">Linux Find Command</h2>
<ul>
<li>During a routine security audit, the team identified an issue on the Nautilus App Server. Some malicious content was identified within the website code. After digging into the issue they found that there
might be more infected files. Before doing a cleanup they would like to find all similar files and copy them to a safe location for further investigation. Accomplish the task as per the following requirements:</li>
<li>a. On App Server 1 at location /var/www/html/official find out all files (not directories) having .js extension.</li>
<li>b. Copy all those files along with their parent directory structure to location /official on same server.</li>
<li>c. Please make sure not to copy the entire /var/www/html/official directory content.</li>
</ul>
<h6 id="solution-8">Solution:</h6>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Shell" data-lang="Shell"><span style="display:flex;"><span><span style="color:#75715e">#connect to app server 1</span>
</span></span><span style="display:flex;"><span>sshpass -p Ir0nM@n ssh -o StrictHostKeyChecking<span style="color:#f92672">=</span>no tony@stapp01
</span></span><span style="display:flex;"><span><span style="color:#75715e">#check if /official exists</span>
</span></span><span style="display:flex;"><span>ls /official
</span></span><span style="display:flex;"><span>ls /var/www/html/
</span></span><span style="display:flex;"><span><span style="color:#75715e">#find all the js files under /var/www/html/official</span>
</span></span><span style="display:flex;"><span>find /var/www/html/official -name <span style="color:#e6db74">&#34;*.js&#34;</span> -type f -exec cp --parents <span style="color:#f92672">{}</span> /official/ <span style="color:#ae81ff">\;</span> 
</span></span><span style="display:flex;"><span><span style="color:#75715e">#verify</span>
</span></span><span style="display:flex;"><span>ls /official/
</span></span></code></pre></div></li>
</ul>
<hr>
<h2 id="linux-postfix-mail">Linux Postfix Mail</h2>
<ul>
<li>xFusionCorp Industries has planned to set up a common email server in Stork DC. After several meetings and recommendations they have decided to use postfix as their mail transfer agent and dovecot as an IMAP/POP3 server. We would like you to perform the following steps:</li>
<li>Install and configure postfix on Stork DC mail server.</li>
<li>Create an email account <a href="mailto:javed@stratos.xfusioncorp.com">javed@stratos.xfusioncorp.com</a> identified by BruCStnMT5.</li>
<li>Set its mail directory to /home/javed/Maildir.</li>
<li>Install and configure dovecot on the same server.</li>
</ul>
<h6 id="solution-9">Solution:</h6>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e">## ssh to the mail server</span>
</span></span><span style="display:flex;"><span>sshpass -p Gr00T123 ssh -o StrictHostKeyChecking groot@stmail01
</span></span><span style="display:flex;"><span><span style="color:#75715e">#switch to the root user</span>
</span></span><span style="display:flex;"><span>sudo su -
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Confirm that yum is installed</span>
</span></span><span style="display:flex;"><span>rpm -qa | grep postfix
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Install postfix on the mail server</span>
</span></span><span style="display:flex;"><span>yum install postfix -y
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Configure postfix on the server</span>
</span></span><span style="display:flex;"><span>vi /etc/postfix/main.cf
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Find the line with #myhostname &amp; #mydomain and set it as follows</span>
</span></span><span style="display:flex;"><span>&gt;myhostname <span style="color:#f92672">=</span> stmail01.stratos.xfusioncorp.com
</span></span><span style="display:flex;"><span>&gt;mydomain <span style="color:#f92672">=</span> stratos.xfusioncorp.com
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Uncomment the &#39;#myorigin=$mydomain&#39; line</span>
</span></span><span style="display:flex;"><span>&gt;myorigin <span style="color:#f92672">=</span> $mydomain
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Uncomment the &#39;#inet_interfaces = all&#39; line</span>
</span></span><span style="display:flex;"><span>&gt; inet_interfaces <span style="color:#f92672">=</span> all
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Uncomment the &#39;#mydestination = $myhostname, localhost.$mydomain, localhost, $mydomain&#39; line</span>
</span></span><span style="display:flex;"><span>&gt; mydestination <span style="color:#f92672">=</span> $myhostname, localhost.$mydomain, localhost, $mydomain
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Uncomment the &#39;#mynetworks = host IP address, =&gt; localhost&#39; line and replace it accordingly</span>
</span></span><span style="display:flex;"><span>&gt;mynetworks <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>host IP address<span style="color:#f92672">}</span>/24, 127.0.0.0/8
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Uncomment the &#39;#home_mailbox = Maildir/&#39; line</span>
</span></span><span style="display:flex;"><span>&gt; home_mailbox <span style="color:#f92672">=</span> Maildir/
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Save and quit the configuration file</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Start postfix and confirm it is working</span>
</span></span><span style="display:flex;"><span>systemctl start postfix
</span></span><span style="display:flex;"><span>systemctl status postfix
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Create the user account for javed</span>
</span></span><span style="display:flex;"><span>useradd javed
</span></span><span style="display:flex;"><span>passwd javed
</span></span><span style="display:flex;"><span>telnet stmail01 <span style="color:#ae81ff">25</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Enter the following settings:</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">=</span>&gt; EHLO localhost
</span></span><span style="display:flex;"><span><span style="color:#f92672">=</span>&gt; mail from: javed@stratos.xfusioncorp.com
</span></span><span style="display:flex;"><span><span style="color:#f92672">=</span>&gt; rcpt to: javed@stratos.xfusioncorp.com
</span></span><span style="display:flex;"><span><span style="color:#f92672">=</span>&gt; DATA
</span></span><span style="display:flex;"><span><span style="color:#f92672">=</span>&gt; test mail
</span></span><span style="display:flex;"><span><span style="color:#f92672">=</span>&gt; quit
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Install dovecot on mail server</span>
</span></span><span style="display:flex;"><span>yum install dovecot -y
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Configure dovecot</span>
</span></span><span style="display:flex;"><span>vi /etc/dovecot/dovecot.conf
</span></span><span style="display:flex;"><span><span style="color:#75715e">#tip&gt;:set nu</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Uncomment &#39;#protocols = imap pop3 lmtp&#39;</span>
</span></span><span style="display:flex;"><span>&gt; save and quit :wq
</span></span><span style="display:flex;"><span><span style="color:#75715e">#modify 10-mail.conf</span>
</span></span><span style="display:flex;"><span>vi /etc/dovecot/conf.d/10-mail.conf
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Uncomment the line &#39;#mail_location = maildir:~/Maildir&#39;</span>
</span></span><span style="display:flex;"><span>&gt; save and quit :wq
</span></span><span style="display:flex;"><span><span style="color:#75715e">#modify 10-auth.conf</span>
</span></span><span style="display:flex;"><span>vi /etc/dovecot/conf.d/10-auth.conf
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Uncomment the line &#39;#disable_plaintext_auth = yes&#39;</span>
</span></span><span style="display:flex;"><span>&gt; disable_plaintext_auth <span style="color:#f92672">=</span> yes
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Set the &#39;auth_mechanisms&#39; line</span>
</span></span><span style="display:flex;"><span>&gt; auth_mechanisms <span style="color:#f92672">=</span> plain login
</span></span><span style="display:flex;"><span>&gt; save and quit :wq
</span></span><span style="display:flex;"><span><span style="color:#75715e">#modfiy master.conf</span>
</span></span><span style="display:flex;"><span>vi 10-master.conf
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Uncomment and set the line &#39;#user = &#39;</span>
</span></span><span style="display:flex;"><span>&gt; user <span style="color:#f92672">=</span> postfix
</span></span><span style="display:flex;"><span>&gt; group <span style="color:#f92672">=</span> postfix
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Start dovecot service</span>
</span></span><span style="display:flex;"><span>systemctl start dovecot
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Test the configuration</span>
</span></span><span style="display:flex;"><span>telnet stmail01 <span style="color:#ae81ff">110</span>
</span></span><span style="display:flex;"><span>&gt; user javed
</span></span><span style="display:flex;"><span>&gt; pass <span style="color:#f92672">{</span>given-password<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>&gt; retr <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>&gt; quit
</span></span><span style="display:flex;"><span>&gt; ss -tulnp
</span></span></code></pre></div></li>
</ul>
<hr>
<h2 id="linux-process-troubleshooting">Linux Process Troubleshooting</h2>
<ul>
<li>The production support team of xFusionCorp Industries has deployed some of the latest monitoring tools to keep an eye on every service, application, etc. running on the systems. One of the monitoring systems reported about Apache service unavailability on one of the app servers in Stratos DC.</li>
<li>Identify the faulty app host and fix the issue. Make sure Apache service is up and running on all app hosts. They might not hosted any code yet on these servers so you need not to worry about if Apache isn&rsquo;t serving any pages or not, just make sure service is up and running. Also, do not try to change the Apache port on any host.</li>
</ul>
<h6 id="solution-10">Solution:</h6>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Shell" data-lang="Shell"><span style="display:flex;"><span><span style="color:#75715e">#First, we need to identify the faulty app. lets use curl from the jump host</span>
</span></span><span style="display:flex;"><span>curl http://stapp01:6200
</span></span><span style="display:flex;"><span>curl http://stapp02:6200
</span></span><span style="display:flex;"><span>curl http://stapp03:6200
</span></span><span style="display:flex;"><span><span style="color:#75715e">#In my case, stapp01 was the faulty app, lets ssh to it and find out whats the problem</span>
</span></span><span style="display:flex;"><span>sshpass -p Ir0nM@n ssh -o StrictHostKeyChecking<span style="color:#f92672">=</span>no tony@stapp01
</span></span><span style="display:flex;"><span>systemctl start httpd
</span></span><span style="display:flex;"><span>systemctl status httpd
</span></span><span style="display:flex;"><span>httpd -t
</span></span><span style="display:flex;"><span>journalctl -xe
</span></span><span style="display:flex;"><span>cat /etc/httpd/conf/httpd_conf | grep Listen
</span></span><span style="display:flex;"><span><span style="color:#75715e">#lets install netstat</span>
</span></span><span style="display:flex;"><span>yum install netstat -y
</span></span><span style="display:flex;"><span>netstat -tulnp |grep <span style="color:#ae81ff">6200</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#get the id of the current proccess using port 6200 and kill it, in my case it was 525</span>
</span></span><span style="display:flex;"><span>kill -9 <span style="color:#ae81ff">525</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#start the service and verify</span>
</span></span><span style="display:flex;"><span>systemctl start httpd
</span></span><span style="display:flex;"><span>systemctl status httpd
</span></span><span style="display:flex;"><span>curl http://stapp01:6200
</span></span></code></pre></div></li>
</ul>
<hr>
<h2 id="install-and-configure-postgresql">Install and Configure PostgreSQL</h2>
<ul>
<li>The Nautilus application development team has shared that they are planning to deploy one newly developed application on Nautilus infra in Stratos DC. The application uses PostgreSQL database, so as a pre-requisite we need to set up PostgreSQL database server as per requirements shared below:</li>
<li>a. Install and configure PostgreSQL database on Nautilus database server.</li>
<li>b. Create a database user kodekloud_sam and set its password to B4zNgHA7Ya.</li>
<li>c. Create a database kodekloud_db8 and grant full permissions to user kodekloud_sam on this database.</li>
<li>d. Make appropriate settings to allow all local clients (local socket connections) to connect to the kodekloud_db8 database through kodekloud_sam user using md5 method (Please do not try to encrypt password with md5sum).</li>
<li>e. At the end its good to test the db connection using these new credentials from root user or server&rsquo;s sudo use</li>
</ul>
<h6 id="solution-11">Solution:</h6>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e">#ssh to the database server</span>
</span></span><span style="display:flex;"><span>sshpass -p Sp<span style="color:#ae81ff">\!</span>dy ssh -o StrictHostKeyChecking<span style="color:#f92672">=</span>no peter@stdb01
</span></span><span style="display:flex;"><span><span style="color:#75715e">#switch to root user</span>
</span></span><span style="display:flex;"><span>sudo su -
</span></span><span style="display:flex;"><span><span style="color:#75715e">#install postgresql</span>
</span></span><span style="display:flex;"><span>yum search all postgresql
</span></span><span style="display:flex;"><span>yum whatprovides postgresql
</span></span><span style="display:flex;"><span>yum install postgresql-server postgresql-contrib
</span></span><span style="display:flex;"><span><span style="color:#75715e">#iniate the db</span>
</span></span><span style="display:flex;"><span>postgresql-setup initdb
</span></span><span style="display:flex;"><span><span style="color:#75715e">#enable and start postgresql</span>
</span></span><span style="display:flex;"><span>systemctl enable postgresql <span style="color:#f92672">&amp;&amp;</span> systemctl start postgresql
</span></span><span style="display:flex;"><span><span style="color:#75715e">#create user and grant full permissions</span>
</span></span><span style="display:flex;"><span>sudo -u postgres psql
</span></span><span style="display:flex;"><span>&gt; CREATE USER &lt;username&gt; WITH PASSWORD &lt;password&gt;;
</span></span><span style="display:flex;"><span>&gt; CREATE DATABASE &lt;database_name&gt;;
</span></span><span style="display:flex;"><span>&gt; GRANT ALL PRIVILEGES ON DATABASE &lt;databse_name&gt; TO &lt;username&gt;; 
</span></span><span style="display:flex;"><span>&gt;<span style="color:#ae81ff">\q</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#configure to postgres to allow local socket cnx using md5 method</span>
</span></span><span style="display:flex;"><span>vi /var/lib/psql/data/pg_hba.conf
</span></span><span style="display:flex;"><span><span style="color:#75715e">#edit the following lines</span>
</span></span><span style="display:flex;"><span>&gt;local all all md5
</span></span><span style="display:flex;"><span>&gt;host all 127.0.0.1/32 md5
</span></span><span style="display:flex;"><span><span style="color:#75715e">#open postgresql.conf and uncomment listen_addresses line</span>
</span></span><span style="display:flex;"><span>vi /var/lib/psql/data/postgresql.conf
</span></span><span style="display:flex;"><span>&gt;listen_addresses <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;localhost&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#restart psq service</span>
</span></span><span style="display:flex;"><span>systemctl restart postgresql
</span></span><span style="display:flex;"><span>systemctl status postgresql
</span></span><span style="display:flex;"><span><span style="color:#75715e">#verifying</span>
</span></span><span style="display:flex;"><span>psql -U &lt;username&gt; -d &lt;database_name&gt; -h 127.0.0.1 -W
</span></span><span style="display:flex;"><span>psql -U &lt;username&gt; -d &lt;database_name&gt; -h localhost -W
</span></span></code></pre></div></li>
</ul>
<hr>
<h2 id="tomcat">Tomcat</h2>
<ul>
<li>The Nautilus application development team recently finished the beta version of one of their Java-based applications, which they are planning to deploy on one of the app servers in Stratos DC. After an internal team meeting, they have decided to use the tomcat application server. Based on the requirements mentioned below complete the task:</li>
<li>a. Install tomcat server on App Server 2 using yum.</li>
<li>b. Configure it to run on port 6300.</li>
<li>c. There is a ROOT.war file on Jump host at location /tmp. Deploy it on this tomcat server and make sure the webpage works directly on base URL i.e without specifying any sub-directory anything like this http://URL/ROOT .</li>
</ul>
<h6 id="solution-12">Solution:</h6>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Shell" data-lang="Shell"><span style="display:flex;"><span><span style="color:#75715e">#ssh to app server 2</span>
</span></span><span style="display:flex;"><span>sshpass -p Am3ric@ ssh -o StrictHostKeyChecking<span style="color:#f92672">=</span>no steve@stapp02
</span></span><span style="display:flex;"><span><span style="color:#75715e">#switch to the root user</span>
</span></span><span style="display:flex;"><span>sudo su -
</span></span><span style="display:flex;"><span><span style="color:#75715e">#install tomcat</span>
</span></span><span style="display:flex;"><span>yum install tomcat -y
</span></span><span style="display:flex;"><span><span style="color:#75715e">#run tomcat on port 6300</span>
</span></span><span style="display:flex;"><span>vi /etc/tomcat/server.xml
</span></span><span style="display:flex;"><span>&gt; look <span style="color:#66d9ef">for</span> Port and change it to &lt;Connector Port <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;6300&#34;</span>&gt;
</span></span><span style="display:flex;"><span>systemctl start tomcat
</span></span><span style="display:flex;"><span>systemctl status tomcat
</span></span><span style="display:flex;"><span><span style="color:#75715e">#from the jumphost copy the ROOT.war to app server2</span>
</span></span><span style="display:flex;"><span>scp ROOT.war steve@lstapp02:/tmp/
</span></span><span style="display:flex;"><span><span style="color:#75715e">#go back to the app server2</span>
</span></span><span style="display:flex;"><span>mv /tmp/ROOT.war /var/lib/tomcat/webapps/
</span></span><span style="display:flex;"><span><span style="color:#75715e">#verify</span>
</span></span><span style="display:flex;"><span>curl localhost:6300
</span></span></code></pre></div></li>
</ul>
<hr>
<h2 id="install-and-configure-sftp">Install and configure SFTP</h2>
<ul>
<li>Some of the developers from Nautilus project team have asked for SFTP access to at least one of the app server in Stratos DC. After going through the requirements, the system admins team has decided to configure the SFTP server on App Server 2 server in Stratos Datacenter. Please configure it as per the following instructions:</li>
<li>a. Create an SFTP user mariyam and set its password to BruCStnMT5.</li>
<li>b. Password authentication should be enabled for this user.</li>
<li>c. Set its ChrootDirectory to /var/www/appdata.</li>
<li>d. SFTP user should only be allowed to make SFTP connections.</li>
</ul>
<h6 id="solution-13">Solution:</h6>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Shell" data-lang="Shell"><span style="display:flex;"><span><span style="color:#75715e">#ssh to app server2</span>
</span></span><span style="display:flex;"><span>sshpass -p Am3ric@ ssh -o StrictHostKeyChecking<span style="color:#f92672">=</span>no steve@stapp02  
</span></span><span style="display:flex;"><span><span style="color:#75715e">#switch to the root user</span>
</span></span><span style="display:flex;"><span>sudo su -
</span></span><span style="display:flex;"><span><span style="color:#75715e">#make the folder appdata</span>
</span></span><span style="display:flex;"><span>mkdir -p /var/www/appdata
</span></span><span style="display:flex;"><span><span style="color:#75715e">#change perms and the owner of appdata folder</span>
</span></span><span style="display:flex;"><span>chmod <span style="color:#ae81ff">755</span> /var/www/appdata/
</span></span><span style="display:flex;"><span>chown root:root /var/www/appdata/
</span></span><span style="display:flex;"><span><span style="color:#75715e">#add user mariyam with appdata as its chrootDir</span>
</span></span><span style="display:flex;"><span>useradd -d /var/www/appdata/ mariyam
</span></span><span style="display:flex;"><span><span style="color:#75715e">#verify</span>
</span></span><span style="display:flex;"><span>cat /etc/passwd
</span></span><span style="display:flex;"><span><span style="color:#75715e">#configure sshd</span>
</span></span><span style="display:flex;"><span>vi /etc/ssh/sshd_config
</span></span><span style="display:flex;"><span>&gt;PasswordAuthentication yes
</span></span><span style="display:flex;"><span>  &gt;ChrootDirectory %h
</span></span><span style="display:flex;"><span>  &gt;AllowTCPForwarding no
</span></span><span style="display:flex;"><span>  &gt;X11Forwarding no
</span></span><span style="display:flex;"><span>  &gt;ForceCommand internal-sftp
</span></span><span style="display:flex;"><span>  &gt;AllowAgentForwarding no
</span></span><span style="display:flex;"><span>  &gt;PermitTunnel no 
</span></span><span style="display:flex;"><span><span style="color:#75715e">#restart sshd </span>
</span></span><span style="display:flex;"><span>systemctl restart sshd
</span></span><span style="display:flex;"><span><span style="color:#75715e">#verify</span>
</span></span><span style="display:flex;"><span>sftp mariyam@stapp02
</span></span></code></pre></div></li>
</ul>
]]></content></item><item><title>KodeKloud Engineer System Administration Challenges - P1</title><link>https://chxmxii.github.io/portfolio/posts/2023/05/kodekloud-engineer-system-administration-challenges-p1/</link><pubDate>Fri, 26 May 2023 00:00:00 +0000</pubDate><guid>https://chxmxii.github.io/portfolio/posts/2023/05/kodekloud-engineer-system-administration-challenges-p1/</guid><description>Linux TimeZones Setting During the daily standup, it was pointed out that the timezone across Nautilus Application Servers in Stratos Datacenter doesn&amp;rsquo;t match with that of the local datacenter&amp;rsquo;s timezone, which is America/Blanc-Sablon. solution : #ssh to app server 1 account and switch to root sshpass -p Ir0nM@n ssh -o StrictHostKeyChecking=no tony@stapp01 sudo su - # change the timezone to America/Blanc-Sablon timedatectl set-timezone America/Blanc-Sablon #Verify timedatectl Linux User Files There was some users data copied on Nautilus App Server 1 at /home/usersdata location by the Nautilus production support team in Stratos DC.</description><content type="html"><![CDATA[<hr>
<h2 id="linux-timezones-setting">Linux TimeZones Setting</h2>
<ul>
<li>During the daily standup, it was pointed out that the timezone across Nautilus Application Servers in Stratos Datacenter doesn&rsquo;t match with that of the local datacenter&rsquo;s timezone, which is America/Blanc-Sablon.</li>
</ul>
<h6 id="solution-">solution :</h6>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e">#ssh to app server 1 account and switch to root</span>
</span></span><span style="display:flex;"><span>sshpass -p Ir0nM@n ssh -o StrictHostKeyChecking<span style="color:#f92672">=</span>no tony@stapp01
</span></span><span style="display:flex;"><span>sudo su -
</span></span><span style="display:flex;"><span><span style="color:#75715e"># change the timezone to America/Blanc-Sablon</span>
</span></span><span style="display:flex;"><span>timedatectl set-timezone America/Blanc-Sablon
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Verify</span>
</span></span><span style="display:flex;"><span>timedatectl
</span></span></code></pre></div></li>
</ul>
<hr>
<h2 id="linux-user-files">Linux User Files</h2>
<ul>
<li>There was some users data copied on Nautilus App Server 1 at /home/usersdata location by the Nautilus production support team in Stratos DC. Later they found that they mistakenly mixed up different user data there. Now they want to filter out some user data and copy it to another location. Find the details below:</li>
<li>On App Server 1 find all files (not directories) owned by user javed inside /home/usersdata directory and copy them all while keeping the folder structure (preserve the directories path) to /news directory.</li>
</ul>
<h6 id="solution--1">Solution :</h6>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e">#ssh to user tony on App server 1 </span>
</span></span><span style="display:flex;"><span>sshpass -p Ir0nM@n ssh -o StrictHostKeyChecking<span style="color:#f92672">=</span>no tony@stapp01
</span></span><span style="display:flex;"><span><span style="color:#75715e">#find all the files copy the to /news directory while keeping the folder structure.</span>
</span></span><span style="display:flex;"><span>find /home/usersdata/ -type f -user javed -exec cp --parents <span style="color:#f92672">{}</span> /news/ <span style="color:#ae81ff">\;</span> 2&gt;/dev/null
</span></span><span style="display:flex;"><span><span style="color:#75715e">#verify</span>
</span></span><span style="display:flex;"><span>yum install tree -y
</span></span><span style="display:flex;"><span>tree /news
</span></span></code></pre></div></li>
</ul>
<hr>
<h2 id="linux-user-without-home">Linux User Without Home</h2>
<ul>
<li>The system admins team of xFusionCorp Industries has set up a new tool on all app servers, as they have a requirement to create a service user account that will be used by that tool. They are finished with all apps except for App Server 1 in Stratos Datacenter.</li>
<li>Create a user named ravi in App Server 1 without a home directory.</li>
</ul>
<h6 id="solution">Solution:</h6>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e">#Login to tony account in App server 1 via SSH</span>
</span></span><span style="display:flex;"><span>sshpass -p Ir0nM@n ssh -o StrictHostKeyChecking<span style="color:#f92672">=</span>no tony@stapp01
</span></span><span style="display:flex;"><span><span style="color:#75715e">#man useradd and look for the option to create a user without a home dir</span>
</span></span><span style="display:flex;"><span>sudo useradd -M ravi
</span></span><span style="display:flex;"><span><span style="color:#75715e">#verify</span>
</span></span><span style="display:flex;"><span>getent passwd
</span></span></code></pre></div></li>
</ul>
<hr>
<h2 id="mariadb-troubleshooting">MariaDB Troubleshooting</h2>
<ul>
<li>There is a critical issue going on with the Nautilus application in Stratos DC. The production support team identified that the application is unable to connect to the database. After digging into the issue, the team found that mariadb service is down on the database server.</li>
<li>Look into the issue and fix the same.</li>
</ul>
<h6 id="soltuion">Soltuion:</h6>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e">#Connect to the db instance</span>
</span></span><span style="display:flex;"><span>sshpass -p Sp<span style="color:#ae81ff">\!</span>dy ssh -o StrictHostKeyChecking<span style="color:#f92672">=</span>no peter@stdb01
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Verify the status of mariadb service</span>
</span></span><span style="display:flex;"><span>systemctl status mariadb
</span></span><span style="display:flex;"><span><span style="color:#75715e">#go through the logs and pay some attention!</span>
</span></span><span style="display:flex;"><span>journalctl -xe
</span></span><span style="display:flex;"><span>cat /var/log/mariadb/mariadb.log
</span></span><span style="display:flex;"><span><span style="color:#75715e">#as you can see, the mariadb service coudln\&#39;t start due to &#39;permision denied&#39; problem! </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#lets check the ownerships of both folders /var/lib/mysql and /var/run/mariadb</span>
</span></span><span style="display:flex;"><span>ll /var/lib/mysql
</span></span><span style="display:flex;"><span>ll /var/run/mariadb
</span></span><span style="display:flex;"><span><span style="color:#75715e">#we notice that the owner of mariadb is sat to root and this was the root problem</span>
</span></span><span style="display:flex;"><span>cd /var/run/
</span></span><span style="display:flex;"><span>chown -R mysql:mysql mariadb/
</span></span><span style="display:flex;"><span><span style="color:#75715e">#start and enbale the service</span>
</span></span><span style="display:flex;"><span>systemctl start mariadb
</span></span><span style="display:flex;"><span>systemctl enable --now mariadb
</span></span></code></pre></div></li>
</ul>
<hr>
<h2 id="linux-ssh-authentication">Linux SSH Authentication</h2>
<ul>
<li>The system admins team of xFusionCorp Industries has set up some scripts on jump host that run on regular intervals and perform operations on all app servers in Stratos Datacenter. To make these scripts work properly we need to make sure the thor user on jump host has password-less SSH access to all app servers through their respective sudo users (i.e tony for app server 1). Based on the requirements, perform the following:</li>
<li>Set up a password-less authentication from user thor on jump host to all app servers through their respective sudo users.</li>
</ul>
<h6 id="solution-1">Solution:</h6>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e">#generate ssh key</span>
</span></span><span style="display:flex;"><span>ssh-keygen -t rsa 
</span></span><span style="display:flex;"><span><span style="color:#75715e">#copy the generated key</span>
</span></span><span style="display:flex;"><span>ssh-copy-id tony@stapp01
</span></span><span style="display:flex;"><span>ssh-copy-id steve@stapp02
</span></span><span style="display:flex;"><span>ssh-copy-id banner@stapp03
</span></span><span style="display:flex;"><span><span style="color:#75715e">#verify</span>
</span></span><span style="display:flex;"><span>ssh tony@stapp01
</span></span><span style="display:flex;"><span>ssh steve@stapp02
</span></span><span style="display:flex;"><span>ssh banner@stapp03
</span></span></code></pre></div></li>
</ul>
<hr>
<h2 id="linux-collaborative-directories">Linux Collaborative Directories</h2>
<ul>
<li>The Nautilus team doesn&rsquo;t want its data to be accessed by any of the other groups/teams due to security reasons and want their data to be strictly accessed by the devops group of the team.</li>
<li>Setup a collaborative directory /devops/data on Nautilus App 3 server in Stratos Datacenter.</li>
<li>The directory should be group owned by the group devops and the group should own the files inside the directory. The directory should be read/write/execute to the group owners, and others should not have any access.</li>
</ul>
<h6 id="solution-2">Solution</h6>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Shell" data-lang="Shell"><span style="display:flex;"><span><span style="color:#75715e">#ssh to app server3</span>
</span></span><span style="display:flex;"><span>sshpass -p BigGr33n ssh -o StrictHostKeyChecking<span style="color:#f92672">=</span>no banner@stapp03
</span></span><span style="display:flex;"><span><span style="color:#75715e">#switch to root</span>
</span></span><span style="display:flex;"><span>sudo su -
</span></span><span style="display:flex;"><span><span style="color:#75715e">#create dir /devops/data</span>
</span></span><span style="display:flex;"><span>mkdir -p /devops/data
</span></span><span style="display:flex;"><span><span style="color:#75715e">#change the group owner</span>
</span></span><span style="display:flex;"><span>m1 : chgrp -R devops /devops <span style="color:#f92672">&amp;&amp;</span> chgrp -R devops /devops/data <span style="color:#f92672">(</span>-R &gt; <span style="color:#66d9ef">for</span> recursive<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>m2 : chown -R :devops /devops 
</span></span><span style="display:flex;"><span><span style="color:#75715e">#change the dir perms</span>
</span></span><span style="display:flex;"><span>chmod -R <span style="color:#ae81ff">2770</span> /devops/ <span style="color:#f92672">&amp;&amp;</span> chmod -R <span style="color:#ae81ff">2770</span> /devops/data
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2</span> &gt; SGID
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">7</span> &gt; rwx
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0</span> &gt; ---
</span></span></code></pre></div></li>
</ul>
<hr>
<h2 id="linux-ntp-setup">Linux NTP Setup</h2>
<ul>
<li>The system admin team of xFusionCorp Industries has noticed an issue with some servers in Stratos Datacenter where some of the servers are not in sync w.r.t time. Because of this, several application functionalities have been impacted. To fix this issue the team has started using common/standard NTP servers. They are finished with most of the servers except App Server 1. Therefore, perform the following tasks on this server:</li>
<li>Install and configure NTP server on App Server 1.</li>
<li>Add NTP server 1.south-america.pool.ntp.org in NTP configuration on App Server 1.</li>
<li>Please do not try to start/restart/stop ntp service, as we already have a restart for this service scheduled for tonight and we don&rsquo;t want these changes to be applied right now</li>
</ul>
<h6 id="solution-3">Solution:</h6>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Shell" data-lang="Shell"><span style="display:flex;"><span><span style="color:#75715e">#ssh to app server 1</span>
</span></span><span style="display:flex;"><span>sshpass -p Ir0nM@n ssh -o StrictHostkeyChecking<span style="color:#f92672">=</span>no tony@stapp01
</span></span><span style="display:flex;"><span><span style="color:#75715e">#switch to root user</span>
</span></span><span style="display:flex;"><span>sudo su -
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Install ntp server if not installed</span>
</span></span><span style="display:flex;"><span>rpm -qa | grep ntp
</span></span><span style="display:flex;"><span>yum install -y ntp
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Configure NTP server</span>
</span></span><span style="display:flex;"><span>vi /etc/ntp.conf 
</span></span><span style="display:flex;"><span>~ insert this line <span style="color:#f92672">(</span>NTP server 1.south-america.pool.ntp.org<span style="color:#f92672">)</span> <span style="color:#66d9ef">then</span> save and quit
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Start and enable the ntp daemon</span>
</span></span><span style="display:flex;"><span>systemctl enable ntpd
</span></span><span style="display:flex;"><span>systemctl start ntpd
</span></span><span style="display:flex;"><span>systemctl status ntpd
</span></span><span style="display:flex;"><span><span style="color:#75715e">#verify configuration</span>
</span></span><span style="display:flex;"><span>ntpstat
</span></span></code></pre></div></li>
</ul>
<hr>
<h2 id="linux-run-levels">Linux Run Levels</h2>
<ul>
<li>New tools have been installed on the app server in Stratos Datacenter. Some of these tools can only be managed from the graphical user interface. Therefore, there are requirements for these app servers.</li>
<li>On all App servers in Stratos Datacenter change the default runlevel so that they can boot in GUI (graphical user interface) by default. Please do not try to reboot these servers</li>
</ul>
<h6 id="solution-4">Solution:</h6>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Shell" data-lang="Shell"><span style="display:flex;"><span><span style="color:#75715e">#ssh to the app server of the 3 accounts</span>
</span></span><span style="display:flex;"><span>sshpass -p BigGr33n ssh -o StrictHostKeyChecking<span style="color:#f92672">=</span>no banner@stapp03
</span></span><span style="display:flex;"><span><span style="color:#75715e">#switch user to root</span>
</span></span><span style="display:flex;"><span>sudo su -
</span></span><span style="display:flex;"><span><span style="color:#75715e">#get the default target</span>
</span></span><span style="display:flex;"><span>systemctl get-default
</span></span><span style="display:flex;"><span><span style="color:#75715e">#notice the default target is set to multi-user.target, you can list all the target using the following command</span>
</span></span><span style="display:flex;"><span>systemctl list-units
</span></span><span style="display:flex;"><span><span style="color:#75715e">#set the default target to graphical.target</span>
</span></span><span style="display:flex;"><span>systemctl set-default graphical.target
</span></span><span style="display:flex;"><span><span style="color:#75715e">#start the new target and verify</span>
</span></span><span style="display:flex;"><span>systemctl start graphical.target <span style="color:#f92672">&amp;&amp;</span> systemctl status graphical.target
</span></span><span style="display:flex;"><span>systemctl get-default
</span></span></code></pre></div></li>
</ul>
<hr>
<h2 id="linux-string-substitute">Linux String Substitute</h2>
<ul>
<li>The backup server in the Stratos DC contains several template XML files used by the Nautilus application. However, these template XML files must be populated with valid data before they can be used. One of the daily tasks of a system admin working in the xFusionCorp industries is to apply string and file manipulation commands!</li>
<li>Replace all occurances of the string Sample to Software on the XML file /root/nautilus.xml located in the backup server.</li>
</ul>
<h6 id="solution-5">Solution</h6>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Shell" data-lang="Shell"><span style="display:flex;"><span><span style="color:#75715e">#ssh to the backup server</span>
</span></span><span style="display:flex;"><span>sshpass -p H@wk3y3 ssh -o StrictHostKeyChecking<span style="color:#f92672">=</span>no clint@stbkp01
</span></span><span style="display:flex;"><span><span style="color:#75715e">#switch to the root user</span>
</span></span><span style="display:flex;"><span>sudo su -
</span></span><span style="display:flex;"><span><span style="color:#75715e">#change the word Sample with SoftWare in the XML file nautilus.xml</span>
</span></span><span style="display:flex;"><span>cat /root/nautilus.xml
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Using sed, you can always refer to the manual for help</span>
</span></span><span style="display:flex;"><span>sed -i <span style="color:#e6db74">&#39;s/Sample/Software/g&#39;</span> nautilus.xml
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Breaking down the sed command</span>
</span></span><span style="display:flex;"><span>-i &gt; save the changes to the file --in-place
</span></span><span style="display:flex;"><span>s &gt; substitue
</span></span><span style="display:flex;"><span>g &gt; global
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Using awk, refer to the manual for help</span>
</span></span><span style="display:flex;"><span>awk <span style="color:#e6db74">&#39;{gsub(&#34;Sample&#34;, &#34;Software&#34;, $0); print &gt; &#34;nautilus.xml&#34;}&#39;</span> nautilus.xml
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Breaking down the awk command</span>
</span></span><span style="display:flex;"><span>gsub<span style="color:#f92672">()</span> -&gt; awk <span style="color:#66d9ef">function</span> to globally substitue the Sample word with Software
</span></span><span style="display:flex;"><span>$0 -&gt; refers to the entire input line being proccessed <span style="color:#f92672">(</span>awk reads the input file line by line <span style="color:#66d9ef">until</span> it reaches the end of file<span style="color:#f92672">)</span>.
</span></span><span style="display:flex;"><span>print &gt; <span style="color:#e6db74">&#34;nautilus.xml&#34;</span> -&gt; overwrites the original file with the modified lines
</span></span></code></pre></div></li>
</ul>
<hr>
<h2 id="linux-string-substitute-sed">Linux String Substitute (sed)</h2>
<ul>
<li>There is some data on Nautilus App Server 1 in Stratos DC. Data needs to be altered in several of the files. On Nautilus App Server 1, alter the /home/BSD.txt file as per details given below:</li>
<li>a. Delete all lines containing word following and save results in /home/BSD_DELETE.txt file. (Please be aware of case sensitivity)</li>
<li>b. Replace all occurrence of word and to them and save results in /home/BSD_REPLACE.txt file.</li>
<li>Note: Let&rsquo;s say you are asked to replace word to with from. In that case, make sure not to alter any words containing this string; for example upto, contributor etc.</li>
</ul>
<h6 id="solution-6">Solution:</h6>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Shell" data-lang="Shell"><span style="display:flex;"><span><span style="color:#75715e">#ssh to app server 1</span>
</span></span><span style="display:flex;"><span>sshpass -p Ir0nM@n ssh -o StrictHostKeyChecking<span style="color:#f92672">=</span>no tony@stapp01
</span></span><span style="display:flex;"><span><span style="color:#75715e">#switch to roo user</span>
</span></span><span style="display:flex;"><span>sudo su -
</span></span><span style="display:flex;"><span><span style="color:#75715e">#cd the /home dir and cat the BSD.txt</span>
</span></span><span style="display:flex;"><span>cd /home 
</span></span><span style="display:flex;"><span>cat BSD.txt
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Delete all lines containing word following and save results in /home/BSD_DELETE.txt file.</span>
</span></span><span style="display:flex;"><span>sed <span style="color:#e6db74">&#39;/\&lt;following\&gt;/d&#39;</span> /home/BSD.txt &gt; /home/BSD_DELETE.txt
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Here, \&lt; and \&gt; are word boundaries in regular expressions, ensuring that only the exact word &#34;following&#34; is </span>
</span></span><span style="display:flex;"><span>matched and not parts of other words.
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Cat the original file and the modified one to verify</span>
</span></span><span style="display:flex;"><span>cat BSD.txt | grep following 
</span></span><span style="display:flex;"><span>cat BSD_DELETE.txt | grep follwing
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Replace all occurrence of word and to them and save results in /home/BSD_REPLACE.txt file.</span>
</span></span><span style="display:flex;"><span>sed <span style="color:#e6db74">&#39;s/\band\b/them/g&#39;</span> /home/BSD.txt &gt; /home/BSD_REPLACE.txt
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Here, \b represents word boundaries in regular expressions, ensuring that only the word &#34;and&#34; is matched as a standalone word and not parts of other   </span>
</span></span><span style="display:flex;"><span>words. 
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Cat the modified file to verify</span>
</span></span><span style="display:flex;"><span>cat BSD_REPLACE.txt | grep them
</span></span><span style="display:flex;"><span>cat BSD_REPLACE.txt | grep them
</span></span></code></pre></div></li>
</ul>
<hr>
<h2 id="dns-troubleshooting">DNS TroubleShooting</h2>
<ul>
<li>the system admins team of xFusionCorp Industries has noticed intermittent issues with DNS resolution in several apps . App Server 3 in Stratos Datacenter is having some DNS resolution issues, so we want to add some additional DNS nameservers on this server.</li>
<li>As a temporary fix we have decided to go with Google public DNS (ipv4). Please make appropriate changes on this server.
ee</li>
</ul>
<h6 id="solution-7">Solution</h6>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Shell" data-lang="Shell"><span style="display:flex;"><span><span style="color:#75715e">#Connect to the app server 3</span>
</span></span><span style="display:flex;"><span>sshpass -p BigGr33n ssh -o StrictHostKeyChecking<span style="color:#f92672">=</span>no banner@stapp03
</span></span><span style="display:flex;"><span><span style="color:#75715e">#switch to root user</span>
</span></span><span style="display:flex;"><span>sudo su -
</span></span><span style="display:flex;"><span><span style="color:#75715e">#test dns with ping command</span>
</span></span><span style="display:flex;"><span>ping www.google.com
</span></span><span style="display:flex;"><span>ping 8.8.8.8
</span></span><span style="display:flex;"><span><span style="color:#75715e">#modify resolv.conf file</span>
</span></span><span style="display:flex;"><span>vi /etc/resolv.conf
</span></span><span style="display:flex;"><span><span style="color:#75715e">#add the following lines</span>
</span></span><span style="display:flex;"><span>nameserver 8.8.8.8
</span></span><span style="display:flex;"><span>nameserver 8.8.4.4
</span></span><span style="display:flex;"><span><span style="color:#75715e">#save modification and test</span>
</span></span><span style="display:flex;"><span>ping www.google.com
</span></span><span style="display:flex;"><span>ping 8.8.8.8
</span></span></code></pre></div></li>
</ul>
<hr>
<h2 id="selinux-installation">Selinux Installation</h2>
<ul>
<li>The xFusionCorp Industries security team recently did a security audit of their infrastructure and came up with ideas to improve the application and server security. They decided to use SElinux for an additional security layer. They are still planning how they will implement it; however, they have decided to start testing with app servers, so based on the recommendations they have the following requirements:</li>
<li>Install the required packages of SElinux on App server 1 in Stratos Datacenter and disable it permanently for now; it will be enabled after making some required configuration changes on this host. Don&rsquo;t worry about rebooting the server as there is already a reboot scheduled for tonight&rsquo;s maintenance window. Also ignore the status of SElinux command line right now; the final status after reboot should be disabled.</li>
</ul>
<h6 id="solution-8">Solution</h6>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Shell" data-lang="Shell"><span style="display:flex;"><span><span style="color:#75715e">#ssh to app server1</span>
</span></span><span style="display:flex;"><span>sshpass -p Ir0nM@n ssh -o StrictHostKeyChecking<span style="color:#f92672">=</span>no tony@stapp01
</span></span><span style="display:flex;"><span><span style="color:#75715e">#switch to root user</span>
</span></span><span style="display:flex;"><span>sudo su -
</span></span><span style="display:flex;"><span><span style="color:#75715e">#testing selinux</span>
</span></span><span style="display:flex;"><span>setatus
</span></span><span style="display:flex;"><span><span style="color:#75715e">#installing selinux</span>
</span></span><span style="display:flex;"><span>yum whatprovides selinux
</span></span><span style="display:flex;"><span>yum search selinux
</span></span><span style="display:flex;"><span><span style="color:#75715e">#install all the packages</span>
</span></span><span style="display:flex;"><span>yum install policycoreutils policycoreutils-python selinux-policy selinux-policy-targeted libselinux-utils setroubleshoot-server setools setools-console mcstrans
</span></span><span style="display:flex;"><span><span style="color:#75715e">#check selinux status</span>
</span></span><span style="display:flex;"><span>sestatus
</span></span><span style="display:flex;"><span><span style="color:#75715e">#set selinux mode to disabled</span>
</span></span><span style="display:flex;"><span>vi /etc/selinux/config <span style="color:#f92672">=</span>&gt; Change the SELINUX<span style="color:#f92672">=</span>enforcing to SELINUX<span style="color:#f92672">=</span>disabled
</span></span><span style="display:flex;"><span><span style="color:#75715e">#checking selinux status again</span>
</span></span><span style="display:flex;"><span>sestatus
</span></span></code></pre></div></li>
</ul>
<hr>
<h2 id="create-cron-jon">Create Cron Jon</h2>
<ul>
<li>The Nautilus system admins team has prepared scripts to automate several day-to-day tasks. They want them to be deployed on all app servers in Stratos DC on a set schedule. Before that they need to test similar functionality with a sample cron job. Therefore, perform the steps below:</li>
<li>a. Install cronie package on all Nautilus app servers and start crond service.</li>
<li>b. Add a cron */5 * * * * echo hello &gt; /tmp/cron_text for root user.</li>
</ul>
<h6 id="solution-9">Solution:</h6>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Shell" data-lang="Shell"><span style="display:flex;"><span><span style="color:#75715e">#ssh to the app servers</span>
</span></span><span style="display:flex;"><span>sshpass -p &lt;password&gt; ssh -o StrictHostKeyChecking<span style="color:#f92672">=</span>no &lt;user&gt;@stapp0<span style="color:#f92672">{</span>1,2,3<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#switch to root user</span>
</span></span><span style="display:flex;"><span>sudo su -
</span></span><span style="display:flex;"><span><span style="color:#75715e">#install cron service</span>
</span></span><span style="display:flex;"><span>yum whatprovides crontab
</span></span><span style="display:flex;"><span>yum install cronie
</span></span><span style="display:flex;"><span><span style="color:#75715e">#start and enable the service</span>
</span></span><span style="display:flex;"><span>systemctl start cronie
</span></span><span style="display:flex;"><span>systemctl enable --now cronie
</span></span><span style="display:flex;"><span>systemctl status cronie
</span></span><span style="display:flex;"><span><span style="color:#75715e">#create a new cron job and copy the job given, the -u here arg is for user and is not actually necessary here</span>
</span></span><span style="display:flex;"><span>crontab -e -u root 
</span></span><span style="display:flex;"><span><span style="color:#75715e">#verify</span>
</span></span><span style="display:flex;"><span>crontab -l
</span></span><span style="display:flex;"><span>cat /var/spool/cron/root
</span></span></code></pre></div></li>
</ul>
<hr>
<h2 id="linux-remote-copy">Linux Remote Copy</h2>
<ul>
<li>One of the Nautilus developers has copied confidential data on the jump host in Stratos DC. That data must be copied to one of the app servers. Because developers do not have access to app servers, they asked the system admins team to accomplish the task for them.</li>
<li>Copy /tmp/nautilus.txt.gpg file from jump server to App Server 1 at location /home/webapp.</li>
</ul>
<h6 id="solution-10">Solution:</h6>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Shell" data-lang="Shell"><span style="display:flex;"><span><span style="color:#75715e">#check for the file in jump hose</span>
</span></span><span style="display:flex;"><span>ls /tmp
</span></span><span style="display:flex;"><span><span style="color:#75715e">#copy the file to the app server1</span>
</span></span><span style="display:flex;"><span>sudo scp -r /tmp/nautilus.txt.gpg tony@stapp01:/home/webapp
</span></span><span style="display:flex;"><span><span style="color:#75715e">#verify</span>
</span></span><span style="display:flex;"><span>sshpass -p Ir0nM@n ssh -o StrictHostKeyChecking<span style="color:#f92672">=</span>no tony@stapp01
</span></span><span style="display:flex;"><span>ls /home/webapp
</span></span></code></pre></div></li>
</ul>
<hr>
<h2 id="linux-postfix-troubleshooting">Linux Postfix Troubleshooting</h2>
<ul>
<li>Some users of the monitoring app have reported issues with xFusionCorp Industries mail server. They have a mail server in Stork DC where they are using postfix mail transfer agent. Postfix service seems to fail. Try to identify the root cause and fix it.</li>
</ul>
<h6 id="solution-11">Solution:</h6>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Shell" data-lang="Shell"><span style="display:flex;"><span><span style="color:#75715e">#connect to the mail server</span>
</span></span><span style="display:flex;"><span>sshpass -p Gr00T123 ssh -o StrictHostKeyChecking<span style="color:#f92672">=</span>no groot@stmail01
</span></span><span style="display:flex;"><span><span style="color:#75715e">#switch to the root user</span>
</span></span><span style="display:flex;"><span>sudo su -
</span></span><span style="display:flex;"><span><span style="color:#75715e">#start the postfix service</span>
</span></span><span style="display:flex;"><span>systemctl start postfix 
</span></span><span style="display:flex;"><span><span style="color:#75715e">#notice the error we get, lets dig into it and understand the root problem</span>
</span></span><span style="display:flex;"><span>systemctl status postifx -l
</span></span><span style="display:flex;"><span>journalctl -xe 
</span></span><span style="display:flex;"><span><span style="color:#75715e">#According to the logs, the error in Postfix occurred because the &#34;inet_interfaces&#34; parameter was set to both &#34;all&#34; and &#34;localhost,&#34; causing a conflict. This conflicting configuration resulted in a malfunction of the system.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#We can fix this by commenting &#34;inet_interfaces=localhost&#34; in /etc/postfix/main.cf</span>
</span></span><span style="display:flex;"><span>vi /etc/postfix/main.cf &gt; add <span style="color:#e6db74">&#34;#&#34;</span> to <span style="color:#e6db74">&#34;inet_interfaces=localhost&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#start the service</span>
</span></span><span style="display:flex;"><span>systemctl start postfix
</span></span><span style="display:flex;"><span>systemctl status postfix
</span></span><span style="display:flex;"><span><span style="color:#75715e">#verify</span>
</span></span><span style="display:flex;"><span>telnet stmail01 <span style="color:#ae81ff">25</span>
</span></span></code></pre></div></li>
</ul>
<hr>
<h2 id="linux-services">Linux Services</h2>
<ul>
<li>As per details shared by the development team, the new application release has some dependencies on the back end. There are some packages/services that need to be installed on all app servers under Stratos Datacenter. As per requirements please perform the following steps:</li>
<li>a. Install nscd package on all the application servers.</li>
<li>b. Once installed, make sure it is enabled to start during boot.</li>
</ul>
<h6 id="solution-12">Solution:</h6>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Shell" data-lang="Shell"><span style="display:flex;"><span><span style="color:#75715e">#ssh to the app servers one by one</span>
</span></span><span style="display:flex;"><span>sshpass -p &lt;password&gt; ssh -o StrictHostKeyChecking<span style="color:#f92672">=</span>no &lt;name&gt;@stapp0<span style="color:#f92672">{</span>1,2,3<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#switch to root user</span>
</span></span><span style="display:flex;"><span>sudo su -
</span></span><span style="display:flex;"><span><span style="color:#75715e">#search for the nscd package</span>
</span></span><span style="display:flex;"><span>yum search nscd
</span></span><span style="display:flex;"><span><span style="color:#75715e">#install the package</span>
</span></span><span style="display:flex;"><span>yum install nscd -y
</span></span><span style="display:flex;"><span><span style="color:#75715e">#start and enbale the service</span>
</span></span><span style="display:flex;"><span>systemctl status nscd
</span></span><span style="display:flex;"><span>systemctl enable --now nscd
</span></span><span style="display:flex;"><span><span style="color:#75715e">#verify the service status</span>
</span></span><span style="display:flex;"><span>systemctl status nscd
</span></span></code></pre></div></li>
</ul>
<hr>
<h2 id="linux-user-expiry">Linux User Expiry</h2>
<ul>
<li>A developer kirsty has been assigned Nautilus project temporarily as a backup resource. As a temporary resource for this project, we need a temporary user for kirsty. It’s a good idea to create a user with a set expiration date so that the user won&rsquo;t be able to access servers beyond that point.</li>
<li>Therefore, create a user named kirsty on the App Server 1. Set expiry date to 2021-02-17 in Stratos Datacenter. Make sure the user is created as per standard and is in lowercase.</li>
</ul>
<h6 id="solution-13">Solution:</h6>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Shell" data-lang="Shell"><span style="display:flex;"><span><span style="color:#75715e">#Connect to app server 1 </span>
</span></span><span style="display:flex;"><span>sshpass -p Ir0nM@n ssh -o StrictHostKeyChecking<span style="color:#f92672">=</span>no tony@stapp01
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Switch to root user</span>
</span></span><span style="display:flex;"><span>sudo su -
</span></span><span style="display:flex;"><span><span style="color:#75715e">#create new user with expiry date</span>
</span></span><span style="display:flex;"><span>useradd -e 2021-02-17 kirsty
</span></span><span style="display:flex;"><span><span style="color:#75715e">#verify</span>
</span></span><span style="display:flex;"><span>chage -l kirsty
</span></span></code></pre></div></li>
</ul>
<hr>
<h2 id="disable-root-login">Disable Root Login</h2>
<ul>
<li>After doing some security audits of servers, xFusionCorp Industries security team has implemented some new security policies. One of them is to disable direct root login through SSH.</li>
<li>Disable direct SSH root login on all app servers in Stratos Datacenter.</li>
</ul>
<h6 id="solution-14">Solution:</h6>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Shell" data-lang="Shell"><span style="display:flex;"><span><span style="color:#75715e">#ssh to the app servers</span>
</span></span><span style="display:flex;"><span>sshpass -p &lt;password&gt; ssh -o StrictHostKeyChecking<span style="color:#f92672">=</span>no &lt;user&gt;@&lt;host&gt;
</span></span><span style="display:flex;"><span><span style="color:#75715e">#switch to the root user</span>
</span></span><span style="display:flex;"><span>sudo su -
</span></span><span style="display:flex;"><span><span style="color:#75715e">#edit the sshd_config file</span>
</span></span><span style="display:flex;"><span>vi /etc/ssh/sshd_config
</span></span><span style="display:flex;"><span>add <span style="color:#e6db74">&#34;PermitRootLogin no&#34;</span> and save the file and quit
</span></span><span style="display:flex;"><span><span style="color:#75715e">#restart ssh daemon </span>
</span></span><span style="display:flex;"><span>systemctl restart sshd
</span></span><span style="display:flex;"><span>systemctl status sshd
</span></span></code></pre></div></li>
</ul>
<hr>
<h2 id="linux-banner">Linux Banner</h2>
<ul>
<li>During the monthly compliance meeting, it was pointed out that several servers in the Stratos DC do not have a valid banner. The security team has provided serveral approved templates which should be applied to the servers to maintain compliance. These will be displayed to the user upon a successful login.</li>
<li>Update the message of the day on all application and db servers for Nautilus. Make use of the approved template located at /home/thor/nautilus_banner on jump host</li>
</ul>
<h6 id="solution-15">Solution</h6>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Shell" data-lang="Shell"><span style="display:flex;"><span><span style="color:#75715e">#scp is not installed in the db server, lets first install it first.</span>
</span></span><span style="display:flex;"><span>sshpass -p Sp<span style="color:#ae81ff">\!</span>dy ssh -o StrictHostKeyChecking<span style="color:#f92672">=</span>no peter@stdb01
</span></span><span style="display:flex;"><span><span style="color:#75715e">#switch to the root user and install the required package</span>
</span></span><span style="display:flex;"><span>sudo su -
</span></span><span style="display:flex;"><span>yum whatprovides scp
</span></span><span style="display:flex;"><span>yum install openssh-clients -y
</span></span><span style="display:flex;"><span><span style="color:#75715e">#now CTRL^D twice and go back to the jump host to copy the template.</span>
</span></span><span style="display:flex;"><span>scp nautilus_banner peter@stdb01:/tmp/motd
</span></span><span style="display:flex;"><span>scp nautilus_banner tony@stapp01:/tmp/motd
</span></span><span style="display:flex;"><span>scp nautilus_banner steve@stapp02:/tmp/motd
</span></span><span style="display:flex;"><span>scp nautilus_banner banner@stapp03:/tmp/motd
</span></span><span style="display:flex;"><span><span style="color:#75715e">#ssh again to the server</span>
</span></span><span style="display:flex;"><span>sshpass -p Sp<span style="color:#ae81ff">\!</span>dy ssh -o StrictHostKeyChecking<span style="color:#f92672">=</span>no peter@stdb01
</span></span><span style="display:flex;"><span><span style="color:#75715e">#move the /tmp/motd file to /etc/motd</span>
</span></span><span style="display:flex;"><span>sudo mv /tmp/motd /etc/motd
</span></span><span style="display:flex;"><span><span style="color:#75715e">#verify</span>
</span></span><span style="display:flex;"><span>cat /etc/motd
</span></span><span style="display:flex;"><span><span style="color:#75715e">#CTRL^D twice and reconnect to the server via ssh to see the changes.</span>
</span></span><span style="display:flex;"><span>sshpass -p Sp<span style="color:#ae81ff">\!</span>dy ssh -o StrictHostKeyChecking<span style="color:#f92672">=</span>no peter@stdb01
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Redo the same process on all app servers.</span>
</span></span></code></pre></div></li>
</ul>
<hr>
]]></content></item><item><title>Terraform Challenge Series - Challenge 1</title><link>https://chxmxii.github.io/portfolio/posts/2023/03/terraform-challenge-series-challenge-1/</link><pubDate>Sun, 26 Mar 2023 00:00:00 +0000</pubDate><guid>https://chxmxii.github.io/portfolio/posts/2023/03/terraform-challenge-series-challenge-1/</guid><description>In this challenge we will deploy several Kubernetes resources using terraform. Utilize /root/terraform_challenge directory to store your Terraform configuration files. Note: kubectl is already installed on the host, you can check your deployments in the usual way.
Architecture : Solution : Controlplane We will start by installing terraform in the controlplane node apt update apt install unzip -y curl -L -o /tmp/terraform_1.1.5_linux_amd64.zip https://releases.hashicorp.com/terraform/1.1.5/terraform_1.1.5_linux_amd64.zip unzip -d /usr/local/bin /tmp/terraform_1.1.5_linux_amd64.zip which terraform terrafomr --version cd /root/terraform_challenge Kubernetes-provider for the kubernets provider we will configure it within provider.</description><content type="html"><![CDATA[<p>In this challenge we will deploy several Kubernetes resources using terraform.
Utilize /root/terraform_challenge directory to store your Terraform configuration files.
Note: kubectl is already installed on the host, you can check your deployments in the usual way.</p>
<h4 id="architecture-">Architecture :</h4>
<p><img src="/files/chall1.png#center" alt=""></p>
<h4 id="solution-">Solution :</h4>
<h5 id="controlplane">Controlplane</h5>
<ul>
<li>We will start by installing terraform in the controlplane node</li>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Shell" data-lang="Shell"><span style="display:flex;"><span>apt update
</span></span><span style="display:flex;"><span>apt install unzip -y
</span></span><span style="display:flex;"><span>curl -L -o /tmp/terraform_1.1.5_linux_amd64.zip https://releases.hashicorp.com/terraform/1.1.5/terraform_1.1.5_linux_amd64.zip
</span></span><span style="display:flex;"><span>unzip -d /usr/local/bin /tmp/terraform_1.1.5_linux_amd64.zip
</span></span><span style="display:flex;"><span>which terraform
</span></span><span style="display:flex;"><span>terrafomr --version
</span></span><span style="display:flex;"><span>cd /root/terraform_challenge
</span></span></code></pre></div></li>
</ul>
<hr>
<h5 id="kubernetes-provider">Kubernetes-provider</h5>
<ul>
<li>for the kubernets provider we will configure it within provider.tf file.</li>
<li>You can refer to the documentation for this provider, simply go to <a href="https://registry.terraform.io/">Terraform Registry</a> and search for hashicorp/kubernetes.</li>
<li>Click on USE PROVIDER button and copy the snippet into provider.tf</li>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Terraform" data-lang="Terraform"><span style="display:flex;"><span><span style="color:#a6e22e">terraform</span> {
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">required_providers</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">kubernetes</span> = {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">source</span> = <span style="color:#e6db74">&#34;hashicorp/kubernetes&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">version</span> = <span style="color:#e6db74">&#34;2.11.0&#34;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">provider</span> <span style="color:#e6db74">&#34;kubernetes&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">config_path</span>    = <span style="color:#e6db74">&#34;/root/.kube/config&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div></li>
</ul>
<p>Now, we can initialize the provider</p>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Shell" data-lang="Shell"><span style="display:flex;"><span>Terraform init
</span></span></code></pre></div></li>
</ul>
<hr>
<h5 id="frontend">frontend</h5>
<ul>
<li>Create a terraform resource frontend for kubernetes deployement, you can refere to the documentation for <a href="https://registry.terraform.io/providers/hashicorp/kubernetes/2.11.0/docs/resources/deployment">Kubernetes_deployment</a>.</li>
<li>If you are familiar with kubernetes, you can see that the resource shema is arranged similarly to the corresponding YAML manifest.</li>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Terraform" data-lang="Terraform"><span style="display:flex;"><span><span style="color:#66d9ef">  resource</span> <span style="color:#e6db74">&#34;kubernetes_deployment&#34;</span> <span style="color:#e6db74">&#34;frontend&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">metadata</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">name</span> = <span style="color:#e6db74">&#34;frontend&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">labels</span> = {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">name</span> = <span style="color:#e6db74">&#34;frontend&#34;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">spec</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">replicas</span> = <span style="color:#ae81ff">4</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">selector</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">match_labels</span> = {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">name</span> = <span style="color:#e6db74">&#34;webapp&#34;</span>
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">template</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">metadata</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">labels</span> = {
</span></span><span style="display:flex;"><span>          <span style="color:#a6e22e">name</span> = <span style="color:#e6db74">&#34;webapp&#34;</span>
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">spec</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">container</span> {
</span></span><span style="display:flex;"><span>          <span style="color:#a6e22e">image</span> = <span style="color:#e6db74">&#34;kodekloud/webapp-color:v1&#34;</span>
</span></span><span style="display:flex;"><span>          <span style="color:#a6e22e">name</span>  = <span style="color:#e6db74">&#34;simple-webapp&#34;</span>
</span></span><span style="display:flex;"><span>          <span style="color:#a6e22e">port</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">container_port</span> = <span style="color:#ae81ff">8080</span>
</span></span><span style="display:flex;"><span>          }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div></li>
</ul>
<hr>
<h5 id="webapp-service">webapp-service</h5>
<ul>
<li>Create terraform resouce webapp-service for kubernetes service, you can always refere to the provider documentation for <a href="https://registry.terraform.io/providers/hashicorp/kubernetes/2.11.0/docs/resources/service">kubernetes_service</a>.</li>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Terraform" data-lang="Terraform"><span style="display:flex;"><span><span style="color:#66d9ef">  resource</span> <span style="color:#e6db74">&#34;kubernetes_service&#34;</span> <span style="color:#e6db74">&#34;webapp-service&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">metadata</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">name</span> = <span style="color:#e6db74">&#34;webapp-service&#34;</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">spec</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">selector</span> = {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">name</span> = <span style="color:#a6e22e">kubernetes_deployment</span>.<span style="color:#a6e22e">frontend</span>.<span style="color:#a6e22e">spec</span>.<span style="color:#ae81ff">0</span>.<span style="color:#a6e22e">template</span>.<span style="color:#ae81ff">0</span>.<span style="color:#a6e22e">metadata</span>.<span style="color:#ae81ff">0</span>.<span style="color:#a6e22e">labels</span>.<span style="color:#a6e22e">name</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">port</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">port</span>        = <span style="color:#ae81ff">8080</span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">target_port</span> = <span style="color:#ae81ff">8080</span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">node_port</span>   = <span style="color:#ae81ff">30080</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">type</span> = <span style="color:#e6db74">&#34;NodePort&#34;</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div></li>
</ul>
<hr>
<h6 id="deploy-the-kubernetes-resources">Deploy the kubernetes resources</h6>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Shell" data-lang="Shell"><span style="display:flex;"><span>terraform plan
</span></span><span style="display:flex;"><span>terraform apply
</span></span></code></pre></div></li>
</ul>
]]></content></item><item><title>Certifications exam notes</title><link>https://chxmxii.github.io/portfolio/posts/2023/01/certifications-exam-notes/</link><pubDate>Mon, 30 Jan 2023 00:00:00 +0000</pubDate><guid>https://chxmxii.github.io/portfolio/posts/2023/01/certifications-exam-notes/</guid><description>These are some useful notes I gathered while pursuing my certifications RHCE Exam Notes and tips
RHCSA Exam Notes and tips
AWS CCP Exam Notes and tips</description><content type="html"><![CDATA[<h3 id="these-are-some-useful-notes-i-gathered-while-pursuing-my-certifications">These are some useful notes I gathered while pursuing my certifications</h3>
<ul>
<li>
<p><a href="https://chxmxii.github.io/portfolio/rhce/main.html">RHCE Exam Notes and tips</a></p>
</li>
<li>
<p><a href="https://chxmxii.gitbook.io/system-management-tasks/">RHCSA Exam Notes and tips</a></p>
</li>
<li>
<p><a href="https://chxmxii.gitbook.io/aws-ccp/">AWS CCP Exam Notes and tips</a></p>
</li>
</ul>
]]></content></item><item><title>Understanding CI/CD</title><link>https://chxmxii.github.io/portfolio/posts/2022/10/understanding-ci/cd/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://chxmxii.github.io/portfolio/posts/2022/10/understanding-ci/cd/</guid><description>0 . 1 What is CI/CD : CI/CD is an automated and reliable process for software development and delivery.&amp;amp;* CI/CD’s frequent testing reduces code errors and defects. The main concepts attributed to CI/CD are continuos integration, delivery and deployment. ⇒ The main goal is to reduce the risk involved in deploying software.
0 . 2 What’s the difference between CI &amp;amp; CD &amp;amp; CD : Countinous integration is an automation process for developers, which is new code changes to an app are regularly built, tested and merged to a shared repository.</description><content type="html"><![CDATA[<p><img src="/files/cicdlogo.png" alt=""></p>
<h3 id="0--1-what-is-cicd-">0 . 1 What is CI/CD :</h3>
<ul>
<li>CI/CD is an automated and reliable process for software development and delivery.&amp;*</li>
<li>CI/CD’s frequent testing reduces code errors and defects.</li>
<li>The main concepts attributed to CI/CD are continuos integration, delivery and deployment.</li>
</ul>
<p>⇒ The main goal is to reduce the risk involved in deploying software.</p>
<h3 id="0--2-whats-the-difference-between-ci--cd--cd-">0 . 2 What’s the difference between CI &amp; CD &amp; CD :</h3>
<ul>
<li>Countinous integration is an automation process for developers, which is new code changes to an app are regularly built, tested and merged to a shared repository.</li>
<li>Countinous delivery is a solution to the problem of poor visibility and commmunication between dev and business teams. its purpose is to ensure that it takes minimal effort to deploy new code.</li>
<li>Countinous deployment means to automatically releasing a dev’s changes from the repository to produciton, where it is usable by customers.</li>
</ul>
<p><img src="/files/cicd.png" alt="Untitled"></p>
<h3 id="0--3-different-stages-">0 . 3 Different stages :</h3>
<p>CI/CD piple can be divided into four main stages :*</p>
<ol>
<li>Source</li>
<li>Build</li>
<li>Test</li>
<li>Deployment</li>
</ol>
<p>The stages are executed in a linear fashion, and each stage must be completed successfully before the next stage can begin.</p>
<p><img src="/files/cicd2.png" alt=""></p>
<p><img src="/files/cicd3.png" alt=""></p>
<h3 id="0--3--1-source-stage">0 . 3 . 1 Source Stage</h3>
<p>First stage of any CI/CD pipeline. In this stage the pipleline will get trigged by any change in the program. this stage will cover version controlling and tracking changes.</p>
<p>If the automated workflow detects a change in the central repository, it will trigger tasks such as code compilation and unit testing.</p>
<p><strong>Example tools :</strong></p>
<ul>
<li>GIT</li>
<li>Azure Repos</li>
<li>AWS CodeCommit</li>
</ul>
<h3 id="0--3--2-build-stage-">0 . 3 . 2 Build Stage :</h3>
<ul>
<li>The second stage of the pipeline you merge the source code and its dependencies.</li>
<li>It is done mainly to build a runnable instance of software that you can potentially ship to the end-user.</li>
<li>Failure to pass the build stage could indicate a fundamental issue in the underlying code.</li>
</ul>
<p>Example tools :</p>
<ol>
<li>Jenkins</li>
<li>AWS CodeBuild</li>
<li>Azure Pipelines</li>
</ol>
<h3 id="0--3--3-test-stage-">0 . 3 . 3 Test Stage :</h3>
<p>Test stage includes the execution of automated tests written by developers (integration testing, functional testing etc..) to validate the correctness of code and the behaviour of the software.</p>
<p>The main goal of this stage is to prevent software bugs from reaching end-users.</p>
<p><strong>Example Tools :</strong></p>
<ol>
<li>Puppeteer</li>
<li>Jest</li>
<li>Selenium.</li>
</ol>
<h3 id="0--3--4-deploy-stage-">0 . 3 . 4 Deploy stage :</h3>
<p>Final stage of the pipeline, where your product goes live after passing the source,build and test stages successfully.</p>
<p>The deployment stage can include infra provisioning, config, and containerization using techs like terraform, puppet,docker and k8s.</p>
<p><strong>Example Tools :</strong></p>
<ol>
<li>Ansible</li>
<li>Chef</li>
<li>AWS Elastic beanstalk</li>
<li>AWS Code Deploy</li>
<li>Azure Pipelines - Deployment.</li>
</ol>
]]></content></item><item><title>Deploying NGINX web server with kubernetes</title><link>https://chxmxii.github.io/portfolio/posts/2022/09/deploying-nginx-web-server-with-kubernetes/</link><pubDate>Sat, 10 Sep 2022 00:00:00 +0000</pubDate><guid>https://chxmxii.github.io/portfolio/posts/2022/09/deploying-nginx-web-server-with-kubernetes/</guid><description>Hello, We already know that with Kubernetes you can easily deploy and manage NGINX across a cluster of nodes, ensuring high availability and efficient resource utilization. In this article, we&amp;rsquo;ll discuss the steps involved in deploying NGINX with Kubernetes and how it can benefit your web hosting infrastructure.
1 - Create nginx-deployement.yaml file :
apiVersion : apps/v1 kind: Deployment metadata: name: nginx labels: app: nginx spec: replicas: 1 selector: matchlabels: app: nginx template: metadata: labels: app: nginx spec: containers: - name: nginx image: nginx ports: - containerPort: 80 2 - Create the deployment : kubectl create -f dep.</description><content type="html"><![CDATA[<p>Hello, We already know that with Kubernetes you can easily deploy and manage NGINX across a cluster of nodes, ensuring high availability and efficient resource utilization. In this article, we&rsquo;ll discuss the steps involved in deploying NGINX with Kubernetes and how it can benefit your web hosting infrastructure.</p>
<p>1 - Create nginx-deployement.yaml file :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion </span>: <span style="color:#ae81ff">apps/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Deployment</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">name</span>: <span style="color:#ae81ff">nginx</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">labels</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">app</span>: <span style="color:#ae81ff">nginx</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">replicas</span>: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">selector</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">matchlabels</span>:
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">app</span>: <span style="color:#ae81ff">nginx</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">template</span>: 
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">metadata</span>: 
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">labels</span>:
</span></span><span style="display:flex;"><span>				<span style="color:#f92672">app</span>: <span style="color:#ae81ff">nginx</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">containers</span>:
</span></span><span style="display:flex;"><span>			- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">nginx</span>
</span></span><span style="display:flex;"><span>				<span style="color:#f92672">image</span>: <span style="color:#ae81ff">nginx</span>
</span></span><span style="display:flex;"><span>				<span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>				- <span style="color:#f92672">containerPort</span>: <span style="color:#ae81ff">80</span>
</span></span></code></pre></div><p>2 - Create the deployment :
<code>kubectl create -f dep.yaml</code>
⇒ This will create one pod with single NGINX container listening on port 80.</p>
<p>3 - Verify :</p>
<p><code>Kubectl get deployment</code></p>
<p>4 - Create nginx-service.yaml :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Service</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">name</span>: <span style="color:#ae81ff">nginx-service</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">selector</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">app</span>: <span style="color:#ae81ff">nginx</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">type</span>: <span style="color:#ae81ff">NodePort</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>	- <span style="color:#f92672">protocol</span>: <span style="color:#ae81ff">TCP</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">port</span>: <span style="color:#ae81ff">80</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">targetpPort</span>: <span style="color:#ae81ff">80</span>
</span></span></code></pre></div><p>5 - Create the service :</p>
<p><code>kubectl create -f nginx-service.yaml</code></p>
<p>⇒ Service will be created as a nodePort, means it will expose the nginx web-server on each node with port 80. pods are selected for this service depending on label selector”app:nginx”, same label we specified while creating the nginx pode in dep.</p>
<p>6 - verify :</p>
<p><code>kubectl get svc</code></p>
]]></content></item><item><title>RingZer0CTF Sysadmin Track</title><link>https://chxmxii.github.io/portfolio/posts/2022/04/ringzer0ctf-sysadmin-track/</link><pubDate>Wed, 20 Apr 2022 00:00:00 +0000</pubDate><guid>https://chxmxii.github.io/portfolio/posts/2022/04/ringzer0ctf-sysadmin-track/</guid><description>SysAdmin Part 1 ┌──(kali㉿kali)-[~] └─$ sshpass -p VNZDDLq2x9qXCzVdABbR1HOtz ssh -o StrictHostKeyChecking=no morpheus@challenges.ringzer0team.com -p 10089 Warning: Permanently added &amp;#39;[challenges.ringzer0team.com]:10089&amp;#39; (ED25519) to the list of known hosts. 888888ba oo d8888888P a8888a d888888P 88 8b .d8&amp;#39; d8 8b 88 88aaaa8P dP 88d888b. .d8888b. .d8&amp;#39; .d8888b. 88d888b. 88 P 88 88 .d8888b. .d8888b. 88d8b.d8b. 88 8b. 88 88 88 88 88 .d8&amp;#39; 88ooood8 88 88 88 d 88 88 88ooood8 88 88 88 88 88 88 88 88 88 88 88 88 d8&amp;#39; 88.</description><content type="html"><![CDATA[<h2 id="sysadmin-part-1">SysAdmin Part 1</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Shell" data-lang="Shell"><span style="display:flex;"><span>┌──<span style="color:#f92672">(</span>kali㉿kali<span style="color:#f92672">)</span>-<span style="color:#f92672">[</span>~<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>└─$ sshpass -p VNZDDLq2x9qXCzVdABbR1HOtz ssh -o StrictHostKeyChecking<span style="color:#f92672">=</span>no morpheus@challenges.ringzer0team.com -p <span style="color:#ae81ff">10089</span>
</span></span><span style="display:flex;"><span>Warning: Permanently added <span style="color:#e6db74">&#39;[challenges.ringzer0team.com]:10089&#39;</span> <span style="color:#f92672">(</span>ED25519<span style="color:#f92672">)</span> to the list of known hosts.
</span></span><span style="display:flex;"><span> 888888ba  oo                   d8888888P                    a8888a  d888888P                              
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">88</span>     8b                           .d8<span style="color:#e6db74">&#39;                   d8    8b    88                                 
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> 88aaaa8P  dP 88d888b. .d8888b.    .d8&#39;</span>   .d8888b. 88d888b. <span style="color:#ae81ff">88</span>  P <span style="color:#ae81ff">88</span>    <span style="color:#ae81ff">88</span>    .d8888b. .d8888b. 88d8b.d8b. 
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">88</span>    8b. <span style="color:#ae81ff">88</span> <span style="color:#ae81ff">88</span>    <span style="color:#ae81ff">88</span> <span style="color:#ae81ff">88</span>    <span style="color:#ae81ff">88</span>  .d8<span style="color:#e6db74">&#39;     88ooood8 88    88 88 d  88    88    88ooood8 88    88 88  88  88 
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> 88     88 88 88    88 88    88 d8&#39;</span>       88.  ... <span style="color:#ae81ff">88</span>       Y8    8P    <span style="color:#ae81ff">88</span>    88.  ... <span style="color:#ae81ff">88</span>    <span style="color:#ae81ff">88</span> <span style="color:#ae81ff">88</span>  <span style="color:#ae81ff">88</span>  <span style="color:#ae81ff">88</span> 
</span></span><span style="display:flex;"><span> dP     dP dP dP    dP <span style="color:#e6db74">`</span>8888P88 Y8888888P <span style="color:#e6db74">`</span>88888P<span style="color:#e6db74">&#39; dP        Y8888P     dP    `88888P&#39;</span> <span style="color:#e6db74">`</span>88888P8 dP  dP  dP 
</span></span><span style="display:flex;"><span>oooooooooooooooooooooooo     <span style="color:#ae81ff">88</span> ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
</span></span><span style="display:flex;"><span>                        d8888P                                                                             
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                                    +---------------------------------+
</span></span><span style="display:flex;"><span>                                    |  Welcome to the Sysadmin track  |
</span></span><span style="display:flex;"><span>                                    |                                 |
</span></span><span style="display:flex;"><span>                                    |   - Play nice and play Fair -   |
</span></span><span style="display:flex;"><span>                                    |                                 |
</span></span><span style="display:flex;"><span>                                    |----<span style="color:#f92672">[</span> info@ringzer0team.com <span style="color:#f92672">]</span>----|
</span></span><span style="display:flex;"><span>$ ls
</span></span></code></pre></div><p>Maybe something is there?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Shell" data-lang="Shell"><span style="display:flex;"><span>$ ls -la
</span></span><span style="display:flex;"><span>total <span style="color:#ae81ff">20</span>
</span></span><span style="display:flex;"><span>drwx------ <span style="color:#ae81ff">2</span> morpheus morpheus <span style="color:#ae81ff">4096</span> Apr <span style="color:#ae81ff">23</span>  <span style="color:#ae81ff">2022</span> .
</span></span><span style="display:flex;"><span>drwxr-xr-x <span style="color:#ae81ff">9</span> root     root     <span style="color:#ae81ff">4096</span> Apr <span style="color:#ae81ff">23</span>  <span style="color:#ae81ff">2022</span> ..
</span></span><span style="display:flex;"><span>lrwxrwxrwx <span style="color:#ae81ff">1</span> root     root        <span style="color:#ae81ff">9</span> Apr <span style="color:#ae81ff">23</span>  <span style="color:#ae81ff">2022</span> .bash_history -&gt; /dev/null
</span></span><span style="display:flex;"><span>-rwx------ <span style="color:#ae81ff">1</span> morpheus morpheus  <span style="color:#ae81ff">220</span> Feb <span style="color:#ae81ff">25</span>  <span style="color:#ae81ff">2020</span> .bash_logout
</span></span><span style="display:flex;"><span>-rwx------ <span style="color:#ae81ff">1</span> morpheus morpheus <span style="color:#ae81ff">3771</span> Feb <span style="color:#ae81ff">25</span>  <span style="color:#ae81ff">2020</span> .bashrc
</span></span><span style="display:flex;"><span>-rwx------ <span style="color:#ae81ff">1</span> morpheus morpheus  <span style="color:#ae81ff">807</span> Feb <span style="color:#ae81ff">25</span>  <span style="color:#ae81ff">2020</span> .profile
</span></span></code></pre></div><p>Checking /etc/passwd</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Shell" data-lang="Shell"><span style="display:flex;"><span>$ cat /etc/passwd
</span></span><span style="display:flex;"><span>systemd-coredump❌999:999:systemd Core Dumper:/:/usr/sbin/nologin
</span></span><span style="display:flex;"><span>ubuntu❌1000:1002:Ubuntu:/home/ubuntu:/bin/bash
</span></span><span style="display:flex;"><span>mysql❌106:112:MySQL Server,,,:/nonexistent:/bin/false
</span></span><span style="display:flex;"><span>sshd❌107:65534::/run/sshd:/usr/sbin/nologin
</span></span><span style="display:flex;"><span>morpheus❌1001:1004:,666,666-6666,:/home/morpheus:/bin/sh
</span></span><span style="display:flex;"><span>trinity❌1002:1005::/home/trinity:/bin/bash
</span></span><span style="display:flex;"><span>architect❌1003:1006::/home/architect:/bin/bash
</span></span><span style="display:flex;"><span>oracle❌1004:1007::/home/oracle:/bin/bash
</span></span><span style="display:flex;"><span>neo❌1005:1008::/home/neo:/bin/bash
</span></span><span style="display:flex;"><span>cypher❌1006:1009::/home/cypher:/bin/bash
</span></span></code></pre></div><p>Nothing there, lets check for the running proccess!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Shell" data-lang="Shell"><span style="display:flex;"><span>$ ps ax
</span></span><span style="display:flex;"><span>    PID TTY      STAT   TIME COMMAND
</span></span><span style="display:flex;"><span>      <span style="color:#ae81ff">1</span> ?        Ss    98:57 /sbin/init splash
</span></span><span style="display:flex;"><span>      <span style="color:#ae81ff">2</span> ?        S      0:11 <span style="color:#f92672">[</span>kthreadd<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">209</span> ?        S      0:26 <span style="color:#f92672">[</span>hwrng<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">246</span> ?        S&lt;s  204:07 /lib/systemd/systemd-journald
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">285</span> ?        Ssl   76:40 /run/lxd_agent/lxd-agent
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">290</span> ?        Ss    25:16 /lib/systemd/systemd-udevd
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">317</span> ?        Ssl    4:32 /lib/systemd/systemd-timesyncd
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">319</span> ?        I&lt;     0:00 <span style="color:#f92672">[</span>ttm_swap<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">387</span> ?        Ss    10:41 /usr/bin/dbus-daemon --system --address<span style="color:#f92672">=</span>systemd: --nofork --nopidfile --systemd-activation --syslog-only
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">393</span> ?        Ss     0:00 /usr/bin/python3 /usr/bin/networkd-dispatcher --run-startup-triggers
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">396</span> ?        S     12:54 /bin/sh /root/backup.sh -u trinity -p Flag-7e0cfcf090a2fe53c97ea3edd3883d0d
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">406</span> ?        Ss    10:40 /lib/systemd/systemd-logind
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1581771</span> ?        S      0:00 sleep <span style="color:#ae81ff">10</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1581772</span> pts/0    R+     0:00 ps ax
</span></span></code></pre></div><ul>
<li>Gottcha ya! -&gt; Flag-7e0cfcf090a2fe53c97ea3edd3883d0d</li>
</ul>
<hr>
<h2 id="sysadmin-part-2">SysAdmin Part 2</h2>
]]></content></item><item><title>Bypassing common jinja2 filters</title><link>https://chxmxii.github.io/portfolio/posts/2021/08/bypassing-common-jinja2-filters/</link><pubDate>Thu, 19 Aug 2021 00:00:00 +0000</pubDate><guid>https://chxmxii.github.io/portfolio/posts/2021/08/bypassing-common-jinja2-filters/</guid><description>What is SSTI? SSTI is an injection vulnerability, similar to other injection vulnerabilities it occurs when unsanitized user input is directly processed by the application or more specifically the template engine.
Depending on the template engine being used the impact can vary, some of the issues range from:
Data exposure (application secrets) Cross Site Scripting Remote Code execution String filters</description><content type="html"><![CDATA[<h2 id="what-is-ssti">What is SSTI?</h2>
<p>SSTI is an injection vulnerability, similar to other injection vulnerabilities it occurs when unsanitized user input is directly processed by the application or more specifically the template engine.</p>
<p>Depending on the template engine being used the impact can vary, some of the issues range from:</p>
<ul>
<li>Data exposure (application secrets)</li>
<li>Cross Site Scripting</li>
<li>Remote Code execution</li>
</ul>
<h3 id="string-filters">String filters</h3>
]]></content></item></channel></rss>