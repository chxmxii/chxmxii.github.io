<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Chamsii Mouhib</title><link>https://chxmxii.github.io/portfolio/posts/</link><description>Recent content in Posts on Chamsii Mouhib</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 18 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://chxmxii.github.io/portfolio/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Certifications exam notes</title><link>https://chxmxii.github.io/portfolio/posts/2022/11/certifications-exam-notes/</link><pubDate>Fri, 18 Nov 2022 00:00:00 +0000</pubDate><guid>https://chxmxii.github.io/portfolio/posts/2022/11/certifications-exam-notes/</guid><description>Some notes I took during my certifications journey: RHCE Exam Notes and tips
RHCSA Exam Notes and tips
AWS CCP Exam Notes and tips</description><content type="html"><![CDATA[<p><img src="/certslogo.png#center" alt=""></p>
<h3 id="some-notes-i-took-during-my-certifications-journey">Some notes I took during my certifications journey:</h3>
<ul>
<li>
<p><a href="https://chxmxii.github.io/portfolio/rhce/main.html">RHCE Exam Notes and tips</a></p>
</li>
<li>
<p><a href="https://chxmxii.gitbook.io/system-management-tasks/">RHCSA Exam Notes and tips</a></p>
</li>
<li>
<p><a href="https://chxmxii.gitbook.io/aws-ccp/">AWS CCP Exam Notes and tips</a></p>
</li>
</ul>
]]></content></item><item><title>Understanding CI/CD</title><link>https://chxmxii.github.io/portfolio/posts/2022/10/understanding-ci/cd/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://chxmxii.github.io/portfolio/posts/2022/10/understanding-ci/cd/</guid><description>0 . 1 What is CI/CD : CI/CD is an automated and reliable process for software development and delivery.&amp;amp;* CI/CD’s frequent testing reduces code errors and defects. The main concepts attributed to CI/CD are continuos integration, delivery and deployment. ⇒ The main goal is to reduce the risk involved in deploying software.
0 . 2 What’s the difference between CI &amp;amp; CD &amp;amp; CD : Countinous integration is an automation process for developers, which is new code changes to an app are regularly built, tested and merged to a shared repository.</description><content type="html"><![CDATA[<p><img src="/cicdlogo.png" alt=""></p>
<h3 id="0--1-what-is-cicd-">0 . 1 What is CI/CD :</h3>
<ul>
<li>CI/CD is an automated and reliable process for software development and delivery.&amp;*</li>
<li>CI/CD’s frequent testing reduces code errors and defects.</li>
<li>The main concepts attributed to CI/CD are continuos integration, delivery and deployment.</li>
</ul>
<p>⇒ The main goal is to reduce the risk involved in deploying software.</p>
<h3 id="0--2-whats-the-difference-between-ci--cd--cd-">0 . 2 What’s the difference between CI &amp; CD &amp; CD :</h3>
<ul>
<li>Countinous integration is an automation process for developers, which is new code changes to an app are regularly built, tested and merged to a shared repository.</li>
<li>Countinous delivery is a solution to the problem of poor visibility and commmunication between dev and business teams. its purpose is to ensure that it takes minimal effort to deploy new code.</li>
<li>Countinous deployment means to automatically releasing a dev’s changes from the repository to produciton, where it is usable by customers.</li>
</ul>
<p><img src="/cicd.png" alt="Untitled"></p>
<h3 id="0--3-different-stages-">0 . 3 Different stages :</h3>
<p>CI/CD piple can be divided into four main stages :*</p>
<ol>
<li>Source</li>
<li>Build</li>
<li>Test</li>
<li>Deployment</li>
</ol>
<p>The stages are executed in a linear fashion, and each stage must be completed successfully before the next stage can begin.</p>
<p><img src="/cicd2.png" alt=""></p>
<p><img src="/cicd3.png" alt=""></p>
<h3 id="0--3--1-source-stage">0 . 3 . 1 Source Stage</h3>
<p>First stage of any CI/CD pipeline. In this stage the pipleline will get trigged by any change in the program. this stage will cover version controlling and tracking changes.</p>
<p>If the automated workflow detects a change in the central repository, it will trigger tasks such as code compilation and unit testing.</p>
<p><strong>Example tools :</strong></p>
<ul>
<li>GIT</li>
<li>Azure Repos</li>
<li>AWS CodeCommit</li>
</ul>
<h3 id="0--3--2-build-stage-">0 . 3 . 2 Build Stage :</h3>
<ul>
<li>The second stage of the pipeline you merge the source code and its dependencies.</li>
<li>It is done mainly to build a runnable instance of software that you can potentially ship to the end-user.</li>
<li>Failure to pass the build stage could indicate a fundamental issue in the underlying code.</li>
</ul>
<p>Example tools :</p>
<ol>
<li>Jenkins</li>
<li>AWS CodeBuild</li>
<li>Azure Pipelines</li>
</ol>
<h3 id="0--3--3-test-stage-">0 . 3 . 3 Test Stage :</h3>
<p>Test stage includes the execution of automated tests written by developers (integration testing, functional testing etc..) to validate the correctness of code and the behaviour of the software.</p>
<p>The main goal of this stage is to prevent software bugs from reaching end-users.</p>
<p><strong>Example Tools :</strong></p>
<ol>
<li>Puppeteer</li>
<li>Jest</li>
<li>Selenium.</li>
</ol>
<h3 id="0--3--4-deploy-stage-">0 . 3 . 4 Deploy stage :</h3>
<p>Final stage of the pipeline, where your product goes live after passing the source,build and test stages successfully.</p>
<p>The deployment stage can include infra provisioning, config, and containerization using techs like terraform, puppet,docker and k8s.</p>
<p><strong>Example Tools :</strong></p>
<ol>
<li>Ansible</li>
<li>Chef</li>
<li>AWS Elastic beanstalk</li>
<li>AWS Code Deploy</li>
<li>Azure Pipelines - Deployment.</li>
</ol>
]]></content></item><item><title>Bypassing common jinja2 filters</title><link>https://chxmxii.github.io/portfolio/posts/2022/08/bypassing-common-jinja2-filters/</link><pubDate>Fri, 19 Aug 2022 00:00:00 +0000</pubDate><guid>https://chxmxii.github.io/portfolio/posts/2022/08/bypassing-common-jinja2-filters/</guid><description>What is SSTI? SSTI is an injection vulnerability, similar to other injection vulnerabilities it occurs when unsanitized user input is directly processed by the application or more specifically the template engine.
Depending on the template engine being used the impact can vary, some of the issues range from:
Data exposure (application secrets) Cross Site Scripting Remote Code execution String filters</description><content type="html"><![CDATA[<h2 id="what-is-ssti">What is SSTI?</h2>
<p>SSTI is an injection vulnerability, similar to other injection vulnerabilities it occurs when unsanitized user input is directly processed by the application or more specifically the template engine.</p>
<p>Depending on the template engine being used the impact can vary, some of the issues range from:</p>
<ul>
<li>Data exposure (application secrets)</li>
<li>Cross Site Scripting</li>
<li>Remote Code execution</li>
</ul>
<h3 id="string-filters">String filters</h3>
]]></content></item></channel></rss>