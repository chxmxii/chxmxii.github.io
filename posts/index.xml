<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Chamsii Mouhib</title><link>https://chxmxii.github.io/portfolio/posts/</link><description>Recent content in Posts on Chamsii Mouhib</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 14 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://chxmxii.github.io/portfolio/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>KodeKloud Engineer System Administration Challenges</title><link>https://chxmxii.github.io/portfolio/posts/2023/05/kodekloud-engineer-system-administration-challenges/</link><pubDate>Sun, 14 May 2023 00:00:00 +0000</pubDate><guid>https://chxmxii.github.io/portfolio/posts/2023/05/kodekloud-engineer-system-administration-challenges/</guid><description>Linux TimeZones Setting During the daily standup, it was pointed out that the timezone across Nautilus Application Servers in Stratos Datacenter doesn&amp;rsquo;t match with that of the local datacenter&amp;rsquo;s timezone, which is America/Blanc-Sablon. solution : #ssh to app server 1 account and switch to root sshpass -p Ir0nM@n ssh -o StrictHostKeyChecking=no tony@stapp01 sudo su - # change the timezone to America/Blanc-Sablon timedatectl set-timezone America/Blanc-Sablon #Verify timedatectl Linux User Files There was some users data copied on Nautilus App Server 1 at /home/usersdata location by the Nautilus production support team in Stratos DC.</description><content type="html"><![CDATA[<h2 id="linux-timezones-setting">Linux TimeZones Setting</h2>
<ul>
<li>During the daily standup, it was pointed out that the timezone across Nautilus Application Servers in Stratos Datacenter doesn&rsquo;t match with that of the local datacenter&rsquo;s timezone, which is America/Blanc-Sablon.</li>
</ul>
<h6 id="solution-">solution :</h6>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e">#ssh to app server 1 account and switch to root</span>
</span></span><span style="display:flex;"><span>sshpass -p Ir0nM@n ssh -o StrictHostKeyChecking<span style="color:#f92672">=</span>no tony@stapp01
</span></span><span style="display:flex;"><span>sudo su -
</span></span><span style="display:flex;"><span><span style="color:#75715e"># change the timezone to America/Blanc-Sablon</span>
</span></span><span style="display:flex;"><span>timedatectl set-timezone America/Blanc-Sablon
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Verify</span>
</span></span><span style="display:flex;"><span>timedatectl
</span></span></code></pre></div></li>
</ul>
<hr>
<h2 id="linux-user-files">Linux User Files</h2>
<ul>
<li>
<p>There was some users data copied on Nautilus App Server 1 at /home/usersdata location by the Nautilus production support team in Stratos DC. Later they found that they mistakenly mixed up different user data there. Now they want to filter out some user data and copy it to another location. Find the details below:</p>
</li>
<li>
<p>On App Server 1 find all files (not directories) owned by user javed inside /home/usersdata directory and copy them all while keeping the folder structure (preserve the directories path) to /news directory.</p>
</li>
</ul>
<h6 id="solution--1">Solution :</h6>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e">#ssh to user tony on App server 1 </span>
</span></span><span style="display:flex;"><span>sshpass -p Ir0nM@n ssh -o StrictHostKeyChecking<span style="color:#f92672">=</span>no tony@stapp01
</span></span><span style="display:flex;"><span><span style="color:#75715e">#find all the files copy the to /news directory while keeping the folder structure.</span>
</span></span><span style="display:flex;"><span>find /home/usersdata/ -type f -user javed -exec cp --parents <span style="color:#f92672">{}</span> /news/ <span style="color:#ae81ff">\;</span> 2&gt;/dev/null
</span></span><span style="display:flex;"><span><span style="color:#75715e">#verify</span>
</span></span><span style="display:flex;"><span>yum install tree -y
</span></span><span style="display:flex;"><span>tree /news
</span></span></code></pre></div></li>
</ul>
<hr>
<h2 id="linux-user-without-home">Linux User Without Home</h2>
<ul>
<li>
<p>The system admins team of xFusionCorp Industries has set up a new tool on all app servers, as they have a requirement to create a service user account that will be used by that tool. They are finished with all apps except for App Server 1 in Stratos Datacenter.</p>
</li>
<li>
<p>Create a user named ravi in App Server 1 without a home directory.</p>
</li>
</ul>
<h6 id="solution">Solution:</h6>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e">#Login to tony account in App server 1 via SSH</span>
</span></span><span style="display:flex;"><span>sshpass -p Ir0nM@n ssh -o StrictHostKeyChecking<span style="color:#f92672">=</span>no tony@stapp01
</span></span><span style="display:flex;"><span><span style="color:#75715e">#man useradd and look for the option to create a user without a home dir</span>
</span></span><span style="display:flex;"><span>sudo useradd -M ravi
</span></span><span style="display:flex;"><span><span style="color:#75715e">#verify</span>
</span></span><span style="display:flex;"><span>getent passwd
</span></span></code></pre></div></li>
</ul>
<hr>
<h2 id="mariadb-troubleshooting">MariaDB Troubleshooting</h2>
<ul>
<li>There is a critical issue going on with the Nautilus application in Stratos DC. The production support team identified that the application is unable to connect to the database. After digging into the issue, the team found that mariadb service is down on the database server.</li>
<li>Look into the issue and fix the same.</li>
</ul>
<h6 id="soltuion">Soltuion:</h6>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e">#Connect to the db instance</span>
</span></span><span style="display:flex;"><span>sshpass -p Sp<span style="color:#ae81ff">\!</span>dy ssh -o StrictHostKeyChecking<span style="color:#f92672">=</span>no peter@stdb01
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Verify the status of mariadb service</span>
</span></span><span style="display:flex;"><span>systemctl status mariadb
</span></span><span style="display:flex;"><span><span style="color:#75715e">#go through the logs and pay some attention!</span>
</span></span><span style="display:flex;"><span>journalctl -xe
</span></span><span style="display:flex;"><span>cat /var/log/mariadb/mariadb.log
</span></span><span style="display:flex;"><span><span style="color:#75715e">#as you can see, the mariadb service coudln\&#39;t start due to &#39;permision denied&#39; problem! </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#lets check the ownerships of both folders /var/lib/mysql and /var/run/mariadb</span>
</span></span><span style="display:flex;"><span>ll /var/lib/mysql
</span></span><span style="display:flex;"><span>ll /var/run/mariadb
</span></span><span style="display:flex;"><span><span style="color:#75715e">#we notice that the owner of mariadb is sat to root and this was the root problem</span>
</span></span><span style="display:flex;"><span>cd /var/run/
</span></span><span style="display:flex;"><span>chown -R mysql:mysql mariadb/
</span></span><span style="display:flex;"><span><span style="color:#75715e">#start and enbale the service</span>
</span></span><span style="display:flex;"><span>systemctl start mariadb
</span></span><span style="display:flex;"><span>systemctl enable --now mariadb
</span></span></code></pre></div></li>
</ul>
<hr>
<h2 id="linux-ssh-authentication">Linux SSH Authentication</h2>
<ul>
<li>
<p>The system admins team of xFusionCorp Industries has set up some scripts on jump host that run on regular intervals and perform operations on all app servers in Stratos Datacenter. To make these scripts work properly we need to make sure the thor user on jump host has password-less SSH access to all app servers through their respective sudo users (i.e tony for app server 1). Based on the requirements, perform the following:</p>
</li>
<li>
<p>Set up a password-less authentication from user thor on jump host to all app servers through their respective sudo users.</p>
</li>
</ul>
<h6 id="solution-1">Solution:</h6>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e">#generate ssh key</span>
</span></span><span style="display:flex;"><span>ssh-keygen -t rsa 
</span></span><span style="display:flex;"><span><span style="color:#75715e">#copy the generated key</span>
</span></span><span style="display:flex;"><span>ssh-copy-id tony@stapp01
</span></span><span style="display:flex;"><span>ssh-copy-id steve@stapp02
</span></span><span style="display:flex;"><span>ssh-copy-id banner@stapp03
</span></span><span style="display:flex;"><span><span style="color:#75715e">#verify</span>
</span></span><span style="display:flex;"><span>ssh tony@stapp01
</span></span><span style="display:flex;"><span>ssh steve@stapp02
</span></span><span style="display:flex;"><span>ssh banner@stapp03
</span></span></code></pre></div></li>
</ul>
<hr>
<h2 id="linux-collaborative-directories">Linux Collaborative Directories</h2>
<ul>
<li>The Nautilus team doesn&rsquo;t want its data to be accessed by any of the other groups/teams due to security reasons and want their data to be strictly accessed by the devops group of the team.</li>
<li>Setup a collaborative directory /devops/data on Nautilus App 3 server in Stratos Datacenter.</li>
<li>The directory should be group owned by the group devops and the group should own the files inside the directory. The directory should be read/write/execute to the group owners, and others should not have any access.</li>
</ul>
<h6 id="solution-2">Solution</h6>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Shell" data-lang="Shell"><span style="display:flex;"><span><span style="color:#75715e">#ssh to app server3</span>
</span></span><span style="display:flex;"><span>sshpass -p BigGr33n ssh -o StrictHostKeyChecking<span style="color:#f92672">=</span>no banner@stapp03
</span></span><span style="display:flex;"><span><span style="color:#75715e">#switch to root</span>
</span></span><span style="display:flex;"><span>sudo su -
</span></span><span style="display:flex;"><span><span style="color:#75715e">#create dir /devops/data</span>
</span></span><span style="display:flex;"><span>mkdir -p /devops/data
</span></span><span style="display:flex;"><span><span style="color:#75715e">#change the group owner</span>
</span></span><span style="display:flex;"><span>m1 : chgrp -R devops /devops <span style="color:#f92672">&amp;&amp;</span> chgrp -R devops /devops/data <span style="color:#f92672">(</span>-R &gt; <span style="color:#66d9ef">for</span> recursive<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>m2 : chown -R :devops /devops 
</span></span><span style="display:flex;"><span><span style="color:#75715e">#change the dir perms</span>
</span></span><span style="display:flex;"><span>chmod -R <span style="color:#ae81ff">2770</span> /devops/ <span style="color:#f92672">&amp;&amp;</span> chmod -R <span style="color:#ae81ff">2770</span> /devops/data
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2</span> &gt; SGID
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">7</span> &gt; rwx
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0</span> &gt; ---
</span></span></code></pre></div></li>
</ul>
<hr>
<h2 id="linux-ntp-setup">Linux NTP Setup</h2>
<ul>
<li>The system admin team of xFusionCorp Industries has noticed an issue with some servers in Stratos Datacenter where some of the servers are not in sync w.r.t time. Because of this, several application functionalities have been impacted. To fix this issue the team has started using common/standard NTP servers. They are finished with most of the servers except App Server 1. Therefore, perform the following tasks on this server:</li>
<li>Install and configure NTP server on App Server 1.</li>
<li>Add NTP server 1.south-america.pool.ntp.org in NTP configuration on App Server 1.</li>
<li>Please do not try to start/restart/stop ntp service, as we already have a restart for this service scheduled for tonight and we don&rsquo;t want these changes to be applied right now</li>
</ul>
<h6 id="solution-3">Solution:</h6>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Shell" data-lang="Shell"><span style="display:flex;"><span><span style="color:#75715e">#ssh to app server 1</span>
</span></span><span style="display:flex;"><span>sshpass -p Ir0nM@n ssh -o StrictHostkeyChecking<span style="color:#f92672">=</span>no tony@stapp01
</span></span><span style="display:flex;"><span><span style="color:#75715e">#switch to root user</span>
</span></span><span style="display:flex;"><span>sudo su -
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Install ntp server if not installed</span>
</span></span><span style="display:flex;"><span>rpm -qa | grep ntp
</span></span><span style="display:flex;"><span>yum install -y ntp
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Configure NTP server</span>
</span></span><span style="display:flex;"><span>vi /etc/ntp.conf 
</span></span><span style="display:flex;"><span>~ insert this line <span style="color:#f92672">(</span>NTP server 1.south-america.pool.ntp.org<span style="color:#f92672">)</span> <span style="color:#66d9ef">then</span> save and quit
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Start and enable the ntp daemon</span>
</span></span><span style="display:flex;"><span>systemctl enable ntpd
</span></span><span style="display:flex;"><span>systemctl start ntpd
</span></span><span style="display:flex;"><span>systemctl status ntpd
</span></span><span style="display:flex;"><span><span style="color:#75715e">#verify configuration</span>
</span></span><span style="display:flex;"><span>ntpstat
</span></span></code></pre></div></li>
</ul>
<hr>
<h2 id="linux-run-levels">Linux Run Levels</h2>
<ul>
<li>New tools have been installed on the app server in Stratos Datacenter. Some of these tools can only be managed from the graphical user interface. Therefore, there are requirements for these app servers.</li>
<li>On all App servers in Stratos Datacenter change the default runlevel so that they can boot in GUI (graphical user interface) by default. Please do not try to reboot these servers</li>
</ul>
<h6 id="solution-4">Solution:</h6>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Shell" data-lang="Shell"><span style="display:flex;"><span><span style="color:#75715e">#ssh to the app server of the 3 accounts</span>
</span></span><span style="display:flex;"><span>sshpass -p BigGr33n ssh -o StrictHostKeyChecking<span style="color:#f92672">=</span>no banner@stapp03
</span></span><span style="display:flex;"><span><span style="color:#75715e">#switch user to root</span>
</span></span><span style="display:flex;"><span>sudo su -
</span></span><span style="display:flex;"><span><span style="color:#75715e">#get the default target</span>
</span></span><span style="display:flex;"><span>systemctl get-default
</span></span><span style="display:flex;"><span><span style="color:#75715e">#notice the default target is set to multi-user.target, you can list all the target using the following command</span>
</span></span><span style="display:flex;"><span>systemctl list-units
</span></span><span style="display:flex;"><span><span style="color:#75715e">#set the default target to graphical.target</span>
</span></span><span style="display:flex;"><span>systemctl set-default graphical.target
</span></span><span style="display:flex;"><span><span style="color:#75715e">#start the new target and verify</span>
</span></span><span style="display:flex;"><span>systemctl start graphical.target <span style="color:#f92672">&amp;&amp;</span> systemctl status graphical.target
</span></span><span style="display:flex;"><span>systemctl get-default
</span></span></code></pre></div></li>
</ul>
<hr>
]]></content></item><item><title>Certifications exam notes</title><link>https://chxmxii.github.io/portfolio/posts/2022/11/certifications-exam-notes/</link><pubDate>Fri, 18 Nov 2022 00:00:00 +0000</pubDate><guid>https://chxmxii.github.io/portfolio/posts/2022/11/certifications-exam-notes/</guid><description>Some notes I took during my certifications journey: RHCE Exam Notes and tips
RHCSA Exam Notes and tips
AWS CCP Exam Notes and tips</description><content type="html"><![CDATA[<p><img src="/certslogo.png#center" alt=""></p>
<h3 id="some-notes-i-took-during-my-certifications-journey">Some notes I took during my certifications journey:</h3>
<ul>
<li>
<p><a href="https://chxmxii.github.io/portfolio/rhce/main.html">RHCE Exam Notes and tips</a></p>
</li>
<li>
<p><a href="https://chxmxii.gitbook.io/system-management-tasks/">RHCSA Exam Notes and tips</a></p>
</li>
<li>
<p><a href="https://chxmxii.gitbook.io/aws-ccp/">AWS CCP Exam Notes and tips</a></p>
</li>
</ul>
]]></content></item><item><title>Understanding CI/CD</title><link>https://chxmxii.github.io/portfolio/posts/2022/10/understanding-ci/cd/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://chxmxii.github.io/portfolio/posts/2022/10/understanding-ci/cd/</guid><description>0 . 1 What is CI/CD : CI/CD is an automated and reliable process for software development and delivery.&amp;amp;* CI/CD’s frequent testing reduces code errors and defects. The main concepts attributed to CI/CD are continuos integration, delivery and deployment. ⇒ The main goal is to reduce the risk involved in deploying software.
0 . 2 What’s the difference between CI &amp;amp; CD &amp;amp; CD : Countinous integration is an automation process for developers, which is new code changes to an app are regularly built, tested and merged to a shared repository.</description><content type="html"><![CDATA[<p><img src="/cicdlogo.png" alt=""></p>
<h3 id="0--1-what-is-cicd-">0 . 1 What is CI/CD :</h3>
<ul>
<li>CI/CD is an automated and reliable process for software development and delivery.&amp;*</li>
<li>CI/CD’s frequent testing reduces code errors and defects.</li>
<li>The main concepts attributed to CI/CD are continuos integration, delivery and deployment.</li>
</ul>
<p>⇒ The main goal is to reduce the risk involved in deploying software.</p>
<h3 id="0--2-whats-the-difference-between-ci--cd--cd-">0 . 2 What’s the difference between CI &amp; CD &amp; CD :</h3>
<ul>
<li>Countinous integration is an automation process for developers, which is new code changes to an app are regularly built, tested and merged to a shared repository.</li>
<li>Countinous delivery is a solution to the problem of poor visibility and commmunication between dev and business teams. its purpose is to ensure that it takes minimal effort to deploy new code.</li>
<li>Countinous deployment means to automatically releasing a dev’s changes from the repository to produciton, where it is usable by customers.</li>
</ul>
<p><img src="/cicd.png" alt="Untitled"></p>
<h3 id="0--3-different-stages-">0 . 3 Different stages :</h3>
<p>CI/CD piple can be divided into four main stages :*</p>
<ol>
<li>Source</li>
<li>Build</li>
<li>Test</li>
<li>Deployment</li>
</ol>
<p>The stages are executed in a linear fashion, and each stage must be completed successfully before the next stage can begin.</p>
<p><img src="/cicd2.png" alt=""></p>
<p><img src="/cicd3.png" alt=""></p>
<h3 id="0--3--1-source-stage">0 . 3 . 1 Source Stage</h3>
<p>First stage of any CI/CD pipeline. In this stage the pipleline will get trigged by any change in the program. this stage will cover version controlling and tracking changes.</p>
<p>If the automated workflow detects a change in the central repository, it will trigger tasks such as code compilation and unit testing.</p>
<p><strong>Example tools :</strong></p>
<ul>
<li>GIT</li>
<li>Azure Repos</li>
<li>AWS CodeCommit</li>
</ul>
<h3 id="0--3--2-build-stage-">0 . 3 . 2 Build Stage :</h3>
<ul>
<li>The second stage of the pipeline you merge the source code and its dependencies.</li>
<li>It is done mainly to build a runnable instance of software that you can potentially ship to the end-user.</li>
<li>Failure to pass the build stage could indicate a fundamental issue in the underlying code.</li>
</ul>
<p>Example tools :</p>
<ol>
<li>Jenkins</li>
<li>AWS CodeBuild</li>
<li>Azure Pipelines</li>
</ol>
<h3 id="0--3--3-test-stage-">0 . 3 . 3 Test Stage :</h3>
<p>Test stage includes the execution of automated tests written by developers (integration testing, functional testing etc..) to validate the correctness of code and the behaviour of the software.</p>
<p>The main goal of this stage is to prevent software bugs from reaching end-users.</p>
<p><strong>Example Tools :</strong></p>
<ol>
<li>Puppeteer</li>
<li>Jest</li>
<li>Selenium.</li>
</ol>
<h3 id="0--3--4-deploy-stage-">0 . 3 . 4 Deploy stage :</h3>
<p>Final stage of the pipeline, where your product goes live after passing the source,build and test stages successfully.</p>
<p>The deployment stage can include infra provisioning, config, and containerization using techs like terraform, puppet,docker and k8s.</p>
<p><strong>Example Tools :</strong></p>
<ol>
<li>Ansible</li>
<li>Chef</li>
<li>AWS Elastic beanstalk</li>
<li>AWS Code Deploy</li>
<li>Azure Pipelines - Deployment.</li>
</ol>
]]></content></item><item><title>Deploying NGINX web server with kubernetes</title><link>https://chxmxii.github.io/portfolio/posts/2022/09/deploying-nginx-web-server-with-kubernetes/</link><pubDate>Sat, 10 Sep 2022 00:00:00 +0000</pubDate><guid>https://chxmxii.github.io/portfolio/posts/2022/09/deploying-nginx-web-server-with-kubernetes/</guid><description>Hello, We already know that with Kubernetes you can easily deploy and manage NGINX across a cluster of nodes, ensuring high availability and efficient resource utilization. In this article, we&amp;rsquo;ll discuss the steps involved in deploying NGINX with Kubernetes and how it can benefit your web hosting infrastructure.
1 - Create nginx-deployement.yaml file :
apiVersion : apps/v1 kind: Deployment metadata: name: nginx labels: app: nginx spec: replicas: 1 selector: matchlabels: app: nginx template: metadata: labels: app: nginx spec: containers: - name: nginx image: nginx ports: - containerPort: 80 2 - Create the deployment : kubectl create -f dep.</description><content type="html"><![CDATA[<p>Hello, We already know that with Kubernetes you can easily deploy and manage NGINX across a cluster of nodes, ensuring high availability and efficient resource utilization. In this article, we&rsquo;ll discuss the steps involved in deploying NGINX with Kubernetes and how it can benefit your web hosting infrastructure.</p>
<p>1 - Create nginx-deployement.yaml file :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion </span>: <span style="color:#ae81ff">apps/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Deployment</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">name</span>: <span style="color:#ae81ff">nginx</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">labels</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">app</span>: <span style="color:#ae81ff">nginx</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">replicas</span>: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">selector</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">matchlabels</span>:
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">app</span>: <span style="color:#ae81ff">nginx</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">template</span>: 
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">metadata</span>: 
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">labels</span>:
</span></span><span style="display:flex;"><span>				<span style="color:#f92672">app</span>: <span style="color:#ae81ff">nginx</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">containers</span>:
</span></span><span style="display:flex;"><span>			- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">nginx</span>
</span></span><span style="display:flex;"><span>				<span style="color:#f92672">image</span>: <span style="color:#ae81ff">nginx</span>
</span></span><span style="display:flex;"><span>				<span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>				- <span style="color:#f92672">containerPort</span>: <span style="color:#ae81ff">80</span>
</span></span></code></pre></div><p>2 - Create the deployment :
<code>kubectl create -f dep.yaml</code>
⇒ This will create one pod with single NGINX container listening on port 80.</p>
<p>3 - Verify :</p>
<p><code>Kubectl get deployment</code></p>
<p>4 - Create nginx-service.yaml :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Service</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">name</span>: <span style="color:#ae81ff">nginx-service</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">selector</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">app</span>: <span style="color:#ae81ff">nginx</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">type</span>: <span style="color:#ae81ff">NodePort</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>	- <span style="color:#f92672">protocol</span>: <span style="color:#ae81ff">TCP</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">port</span>: <span style="color:#ae81ff">80</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">targetpPort</span>: <span style="color:#ae81ff">80</span>
</span></span></code></pre></div><p>5 - Create the service :</p>
<p><code>kubectl create -f nginx-service.yaml</code></p>
<p>⇒ Service will be created as a nodePort, means it will expose the nginx web-server on each node with port 80. pods are selected for this service depending on label selector”app:nginx”, same label we specified while creating the nginx pode in dep.</p>
<p>6 - verify :</p>
<p><code>kubectl get svc</code></p>
]]></content></item><item><title>Bypassing common jinja2 filters</title><link>https://chxmxii.github.io/portfolio/posts/2022/08/bypassing-common-jinja2-filters/</link><pubDate>Fri, 19 Aug 2022 00:00:00 +0000</pubDate><guid>https://chxmxii.github.io/portfolio/posts/2022/08/bypassing-common-jinja2-filters/</guid><description>What is SSTI? SSTI is an injection vulnerability, similar to other injection vulnerabilities it occurs when unsanitized user input is directly processed by the application or more specifically the template engine.
Depending on the template engine being used the impact can vary, some of the issues range from:
Data exposure (application secrets) Cross Site Scripting Remote Code execution String filters</description><content type="html"><![CDATA[<h2 id="what-is-ssti">What is SSTI?</h2>
<p>SSTI is an injection vulnerability, similar to other injection vulnerabilities it occurs when unsanitized user input is directly processed by the application or more specifically the template engine.</p>
<p>Depending on the template engine being used the impact can vary, some of the issues range from:</p>
<ul>
<li>Data exposure (application secrets)</li>
<li>Cross Site Scripting</li>
<li>Remote Code execution</li>
</ul>
<h3 id="string-filters">String filters</h3>
]]></content></item></channel></rss>