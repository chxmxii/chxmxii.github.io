<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Chamsii Mouhib</title><link>https://chxmxii.github.io/portfolio/posts/</link><description>Recent content in Posts on Chamsii Mouhib</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 18 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://chxmxii.github.io/portfolio/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Certifications exam notes</title><link>https://chxmxii.github.io/portfolio/posts/2022/11/certifications-exam-notes/</link><pubDate>Fri, 18 Nov 2022 00:00:00 +0000</pubDate><guid>https://chxmxii.github.io/portfolio/posts/2022/11/certifications-exam-notes/</guid><description>Just some notes I took while revising for certifications :
RHCE Exam Notes and tips
RHCSA Exam Notes and tips
AWS CCP Exam Notes and tips</description><content type="html"><![CDATA[<p>Just some notes I took while revising for certifications :</p>
<ul>
<li>
<p><a href="https://chxmxii.github.io/portfolio/rhce/main.html">RHCE Exam Notes and tips</a></p>
</li>
<li>
<p><a href="https://chxmxii.gitbook.io/system-management-tasks/">RHCSA Exam Notes and tips</a></p>
</li>
<li>
<p><a href="https://chxmxii.gitbook.io/aws-ccp/">AWS CCP Exam Notes and tips</a></p>
</li>
</ul>
]]></content></item><item><title>Understanding CI/CD</title><link>https://chxmxii.github.io/portfolio/posts/2022/10/understanding-ci/cd/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://chxmxii.github.io/portfolio/posts/2022/10/understanding-ci/cd/</guid><description>0 . 1 What is CI/CD : CI/CD is an automated and reliable process for software development and delivery.&amp;amp; CI/CD’s frequent testing reduces code errors and defects. The main concepts attributed to CI/CD are continuos integration, delivery and deployment. ⇒ The main goal is to reduce the risk involved in deploying software.
0 . 2 What’s the difference between CI &amp;amp; CD &amp;amp; CD : Countinous integration is an automation process for developers, which is new code changes to an app are regularly built, tested and merged to a shared repository.</description><content type="html"><![CDATA[<h3 id="0--1-what-is-cicd-">0 . 1 What is CI/CD :</h3>
<ul>
<li><em>CI/CD is an automated and reliable process for software development and delivery.&amp;</em></li>
<li><em>CI/CD’s frequent testing reduces code errors and defects.</em></li>
<li><em>The main concepts attributed to CI/CD are continuos integration, delivery and deployment.</em></li>
</ul>
<p>⇒ The main goal is to reduce the risk involved in deploying software.</p>
<h3 id="0--2-whats-the-difference-between-ci--cd--cd-">0 . 2 What’s the difference between CI &amp; CD &amp; CD :</h3>
<ul>
<li><em>Countinous integration is an automation process for developers, which is new code changes to an app are regularly built, tested and merged to a shared repository.</em></li>
<li><em>Countinous delivery is a solution to the problem of poor visibility and commmunication between dev and business teams. its purpose is to ensure that it takes minimal effort to deploy new code.</em></li>
<li><em>Countinous deployment means to automatically releasing a dev’s changes from the repository to produciton, where it is usable by customers.</em></li>
</ul>
<p><img src="/cicd.png" alt="Untitled"></p>
<h3 id="0--3-different-stages-">0 . 3 Different stages :</h3>
<p><em>CI/CD piple can be divided into four main stages :</em></p>
<ol>
<li><em>Source</em></li>
<li><em>Build</em></li>
<li><em>Test</em></li>
<li><em>Deployment</em></li>
</ol>
<p><em>Each stage must be completed before continuing to the next stage.</em></p>
<p><img src="/cicd2.png" alt=""></p>
<p><img src="/cicd3.png" alt=""></p>
<h3 id="0--3--1-source-stage">0 . 3 . 1 Source Stage</h3>
<p><em>First stage of any CI/CD pipeline. In this stage the pipleline will get trigged by any change in the program. this stage will cover version controlling and tracking changes.</em></p>
<p><em>If the automated workflow detects a change in the central repository, it will trigger tasks such as code compilation and unit testing.</em></p>
<p><strong>Example tools :</strong></p>
<ul>
<li>GIT</li>
<li>Azure Repos</li>
<li>AWS CodeCommit</li>
</ul>
<h3 id="0--3--2-build-stage-">0 . 3 . 2 Build Stage :</h3>
<ul>
<li><em>The second stage of the pipeline you merge the source code and its dependencies.</em></li>
<li><em>It is done mainly to build a runnable instance of software that you can potentially ship to the end-user.</em></li>
<li><em>Failure to pass the build stage could indicate a fundamental issue in the underlying code.</em></li>
</ul>
<p>Example tools :</p>
<ol>
<li>Jenkins</li>
<li>AWS CodeBuild</li>
<li>Azure Pipelines</li>
</ol>
<h3 id="0--3--3-test-stage-">0 . 3 . 3 Test Stage :</h3>
<p><em>Test stage includes the execution of automated tests written by developers (integration testing, functional testing etc..) to validate the correctness of code and the behaviour of the software.</em></p>
<p><em>The main goal of this stage is to prevent software bugs from reaching end-users.</em></p>
<p><strong>Example Tools :</strong></p>
<ol>
<li>Puppeteer</li>
<li>Jest</li>
<li>Selenium.</li>
</ol>
<h3 id="0--3--4-deploy-stage-">0 . 3 . 4 Deploy stage :</h3>
<p><em>Final stage of the pipeline, where your product goes live after passing the source,build and test stages successfully.</em></p>
<p><em>The deployment stage can include infra provisioning, config, and containerization using techs like terraform, puppet,docker and k8s.</em></p>
<p><strong>Example Tools :</strong></p>
<ol>
<li>Ansible</li>
<li>Chef</li>
<li>AWS Elastic beanstalk</li>
<li>AWS Code Deploy</li>
<li>Azure Pipelines - Deployment.</li>
</ol>
]]></content></item><item><title>Kubernetes Nginx Web Server Deployement</title><link>https://chxmxii.github.io/portfolio/posts/2022/09/kubernetes-nginx-web-server-deployement/</link><pubDate>Sat, 10 Sep 2022 00:00:00 +0000</pubDate><guid>https://chxmxii.github.io/portfolio/posts/2022/09/kubernetes-nginx-web-server-deployement/</guid><description>1 - Create nginx-deployement.yaml file :
apiVersion : apps/v1 kind: Deployment metadata: name: nginx labels: app: nginx spec: replicas: 1 selector: matchlabels: app: nginx template: metadata: labels: app: nginx spec: containers: - name: nginx image: nginx ports: - containerPort: 80 2 - Create the deployment : kubectl create -f dep.yaml ⇒ This will create one pod with single NGINX container listening on port 80.
3 - Verify :
Kubectl get deployment</description><content type="html"><![CDATA[<p>1 - Create nginx-deployement.yaml file :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion </span>: <span style="color:#ae81ff">apps/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Deployment</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">name</span>: <span style="color:#ae81ff">nginx</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">labels</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">app</span>: <span style="color:#ae81ff">nginx</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">replicas</span>: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">selector</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">matchlabels</span>:
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">app</span>: <span style="color:#ae81ff">nginx</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">template</span>: 
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">metadata</span>: 
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">labels</span>:
</span></span><span style="display:flex;"><span>				<span style="color:#f92672">app</span>: <span style="color:#ae81ff">nginx</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">containers</span>:
</span></span><span style="display:flex;"><span>			- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">nginx</span>
</span></span><span style="display:flex;"><span>				<span style="color:#f92672">image</span>: <span style="color:#ae81ff">nginx</span>
</span></span><span style="display:flex;"><span>				<span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>				- <span style="color:#f92672">containerPort</span>: <span style="color:#ae81ff">80</span>
</span></span></code></pre></div><p>2 - Create the deployment :
<code>kubectl create -f dep.yaml</code>
⇒ This will create one pod with single NGINX container listening on port 80.</p>
<p>3 - Verify :</p>
<p><code>Kubectl get deployment</code></p>
<p>4 - Create nginx-service.yaml :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Service</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">name</span>: <span style="color:#ae81ff">nginx-service</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">selector</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">app</span>: <span style="color:#ae81ff">nginx</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">type</span>: <span style="color:#ae81ff">NodePort</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>	- <span style="color:#f92672">protocol</span>: <span style="color:#ae81ff">TCP</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">port</span>: <span style="color:#ae81ff">80</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">targetpPort</span>: <span style="color:#ae81ff">80</span>
</span></span></code></pre></div><p>5 - Create the service :</p>
<p><code>kubectl create -f nginx-service.yaml</code></p>
<p>⇒ Service will be created as a nodePort, means it will expose the nginx web-server on each node with port 80. pods are selected for this service depending on label selector”app:nginx”, same label we specified while creating the nginx pode in dep.</p>
<p>6 - verify :</p>
<p><code>kubectl get svc</code></p>
]]></content></item><item><title>Making of SSTI Vulnerable Application</title><link>https://chxmxii.github.io/portfolio/posts/2022/08/making-of-ssti-vulnerable-application/</link><pubDate>Fri, 19 Aug 2022 00:00:00 +0000</pubDate><guid>https://chxmxii.github.io/portfolio/posts/2022/08/making-of-ssti-vulnerable-application/</guid><description>Hey folks, today we are going to</description><content type="html">&lt;p>Hey folks, today we are going to&lt;/p></content></item></channel></rss>