<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hugo 101 on Chamsii Mouhib</title>
    <link>https://chxmxii.github.io/portfolio/series/hugo-101/</link>
    <description>Recent content in Hugo 101 on Chamsii Mouhib</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 18 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://chxmxii.github.io/portfolio/series/hugo-101/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Certifications exam notes</title>
      <link>https://chxmxii.github.io/portfolio/posts/2022/11/certifications-exam-notes/</link>
      <pubDate>Fri, 18 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://chxmxii.github.io/portfolio/posts/2022/11/certifications-exam-notes/</guid>
      <description>Just some notes I took while revising for certifications :
RHCE Exam Notes and tips
RHCSA Exam Notes and tips
AWS CCP Exam Notes and tips</description>
    </item>
    
    <item>
      <title>Understanding CI/CD</title>
      <link>https://chxmxii.github.io/portfolio/posts/2022/10/understanding-ci/cd/</link>
      <pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://chxmxii.github.io/portfolio/posts/2022/10/understanding-ci/cd/</guid>
      <description>0 . 1 What is CI/CD : CI/CD is an automated and reliable process for software development and delivery.&amp;amp; CI/CD’s frequent testing reduces code errors and defects. The main concepts attributed to CI/CD are continuos integration, delivery and deployment. ⇒ The main goal is to reduce the risk involved in deploying software.
0 . 2 What’s the difference between CI &amp;amp; CD &amp;amp; CD : Countinous integration is an automation process for developers, which is new code changes to an app are regularly built, tested and merged to a shared repository.</description>
    </item>
    
    <item>
      <title>Kubernetes Nginx Web Server Deployement</title>
      <link>https://chxmxii.github.io/portfolio/posts/2022/09/kubernetes-nginx-web-server-deployement/</link>
      <pubDate>Sat, 10 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://chxmxii.github.io/portfolio/posts/2022/09/kubernetes-nginx-web-server-deployement/</guid>
      <description>1 - Create nginx-deployement.yaml file :
apiVersion : apps/v1 kind: Deployment metadata: name: nginx labels: app: nginx spec: replicas: 1 selector: matchlabels: app: nginx template: metadata: labels: app: nginx spec: containers: - name: nginx image: nginx ports: - containerPort: 80 2 - Create the deployment : kubectl create -f dep.yaml ⇒ This will create one pod with single NGINX container listening on port 80.
3 - Verify :
Kubectl get deployment</description>
    </item>
    
    <item>
      <title>Bypassing common jinja2 filters</title>
      <link>https://chxmxii.github.io/portfolio/posts/2022/08/bypassing-common-jinja2-filters/</link>
      <pubDate>Fri, 19 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://chxmxii.github.io/portfolio/posts/2022/08/bypassing-common-jinja2-filters/</guid>
      <description>&amp;laquo;&amp;laquo;&amp;laquo;&amp;lt; HEAD
What is SSTI? SSTI is an injection vulnerability, similar to other injection vulnerabilities it occurs when unsanitized user input is directly processed by the application or more specifically the template engine.
Depending on the template engine being used the impact can vary, some of the issues range from:
Data exposure (application secrets) Cross Site Scripting Remote Code execution String filters </description>
    </item>
    
  </channel>
</rss>
