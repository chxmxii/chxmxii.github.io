<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hugo 101 on Chamsii Mouhib</title><link>https://chxmxii.github.io/portfolio/series/hugo-101/</link><description>Recent content in Hugo 101 on Chamsii Mouhib</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 04 Aug 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://chxmxii.github.io/portfolio/series/hugo-101/index.xml" rel="self" type="application/rss+xml"/><item><title>KodeKloud Engineer Docker Challenges</title><link>https://chxmxii.github.io/portfolio/posts/2023/08/kodekloud-engineer-docker-challenges/</link><pubDate>Fri, 04 Aug 2023 00:00:00 +0000</pubDate><guid>https://chxmxii.github.io/portfolio/posts/2023/08/kodekloud-engineer-docker-challenges/</guid><description>Ansible Unarchive Module One of the DevOps team members has created an ZIP archive on jump host in Stratos DC that needs to be extracted and copied over to all app servers in Stratos DC itself. Because this is a routine task, the Nautilus DevOps team has suggested automating it. We can use Ansible since we have been using it for other automation tasks. Below you can find more details about the task: We have an inventory file under /home/thor/ansible directory on jump host, which should have all the app servers added already.</description></item><item><title>Certifications exam notes</title><link>https://chxmxii.github.io/portfolio/posts/2023/07/certifications-exam-notes/</link><pubDate>Sun, 30 Jul 2023 00:00:00 +0000</pubDate><guid>https://chxmxii.github.io/portfolio/posts/2023/07/certifications-exam-notes/</guid><description>These are some useful notes I gathered while pursuing my certifications RHCE EX294 Notes and tips
RHCCS EX188 Notes and tips
RHCSA EX200 Notes and tips
AWS CCP Exam Notes and tips</description></item><item><title>KodeKloud Engineer System Administration Challenges - P2</title><link>https://chxmxii.github.io/portfolio/posts/2023/06/kodekloud-engineer-system-administration-challenges-p2/</link><pubDate>Thu, 22 Jun 2023 00:00:00 +0000</pubDate><guid>https://chxmxii.github.io/portfolio/posts/2023/06/kodekloud-engineer-system-administration-challenges-p2/</guid><description>Web Server Security During a recent security audit, the application security team of xFusionCorp Industries found security issues with the Apache web server on Nautilus App Server 1 server in Stratos DC. They have listed several security issues that need to be fixed on this server. Please apply the security settings below: a. On Nautilus App Server 1 it was identified that the Apache web server is exposing the version number.</description></item><item><title>KodeKloud Engineer System Administration Challenges - P1</title><link>https://chxmxii.github.io/portfolio/posts/2023/05/kodekloud-engineer-system-administration-challenges-p1/</link><pubDate>Fri, 26 May 2023 00:00:00 +0000</pubDate><guid>https://chxmxii.github.io/portfolio/posts/2023/05/kodekloud-engineer-system-administration-challenges-p1/</guid><description>Linux TimeZones Setting During the daily standup, it was pointed out that the timezone across Nautilus Application Servers in Stratos Datacenter doesn&amp;rsquo;t match with that of the local datacenter&amp;rsquo;s timezone, which is America/Blanc-Sablon. solution : #ssh to app server 1 account and switch to root sshpass -p Ir0nM@n ssh -o StrictHostKeyChecking=no tony@stapp01 sudo su - # change the timezone to America/Blanc-Sablon timedatectl set-timezone America/Blanc-Sablon #Verify timedatectl Linux User Files There was some users data copied on Nautilus App Server 1 at /home/usersdata location by the Nautilus production support team in Stratos DC.</description></item><item><title>Terraform Challenge Series - Challenge 1</title><link>https://chxmxii.github.io/portfolio/posts/2023/03/terraform-challenge-series-challenge-1/</link><pubDate>Sun, 26 Mar 2023 00:00:00 +0000</pubDate><guid>https://chxmxii.github.io/portfolio/posts/2023/03/terraform-challenge-series-challenge-1/</guid><description>In this challenge we will deploy several Kubernetes resources using terraform. Utilize /root/terraform_challenge directory to store your Terraform configuration files. Note: kubectl is already installed on the host, you can check your deployments in the usual way.
Architecture : Solution : Controlplane We will start by installing terraform in the controlplane node apt update apt install unzip -y curl -L -o /tmp/terraform_1.1.5_linux_amd64.zip https://releases.hashicorp.com/terraform/1.1.5/terraform_1.1.5_linux_amd64.zip unzip -d /usr/local/bin /tmp/terraform_1.1.5_linux_amd64.zip which terraform terrafomr --version cd /root/terraform_challenge Kubernetes-provider for the kubernets provider we will configure it within provider.</description></item><item><title>Understanding CI/CD</title><link>https://chxmxii.github.io/portfolio/posts/2022/10/understanding-ci/cd/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://chxmxii.github.io/portfolio/posts/2022/10/understanding-ci/cd/</guid><description>0 . 1 What is CI/CD : CI/CD is an automated and reliable process for software development and delivery.&amp;amp;* CI/CD’s frequent testing reduces code errors and defects. The main concepts attributed to CI/CD are continuos integration, delivery and deployment. ⇒ The main goal is to reduce the risk involved in deploying software.
0 . 2 What’s the difference between CI &amp;amp; CD &amp;amp; CD : Countinous integration is an automation process for developers, which is new code changes to an app are regularly built, tested and merged to a shared repository.</description></item><item><title>Automating the implementation of a DevSecOps Pipeline - PART 01</title><link>https://chxmxii.github.io/portfolio/projects/project01.txt/</link><pubDate>Sat, 10 Sep 2022 00:00:00 +0000</pubDate><guid>https://chxmxii.github.io/portfolio/projects/project01.txt/</guid><description>Picture this: software development practices evolving like a Pokémon on steroids, giving birth to the legendary concepts of DevOps and its sidekick, DevSecOps. They&amp;rsquo;re like Batman and Robin, but for software development. DevOps focuses on collaboration and integration between development and operations teams, turbocharging software delivery speed and reliability. And then, DevSecOps enters the scene, adding a sprinkle of security practices throughout the entire software development lifecycle. It&amp;rsquo;s like adding a secret agent to the mix – shaken, not stirred.</description></item><item><title>Deploying NGINX web server with kubernetes</title><link>https://chxmxii.github.io/portfolio/posts/2022/09/deploying-nginx-web-server-with-kubernetes/</link><pubDate>Sat, 10 Sep 2022 00:00:00 +0000</pubDate><guid>https://chxmxii.github.io/portfolio/posts/2022/09/deploying-nginx-web-server-with-kubernetes/</guid><description>Hello, We already know that with Kubernetes you can easily deploy and manage NGINX across a cluster of nodes, ensuring high availability and efficient resource utilization. In this article, we&amp;rsquo;ll discuss the steps involved in deploying NGINX with Kubernetes and how it can benefit your web hosting infrastructure.
1 - Create nginx-deployement.yaml file :
apiVersion : apps/v1 kind: Deployment metadata: name: nginx labels: app: nginx spec: replicas: 1 selector: matchlabels: app: nginx template: metadata: labels: app: nginx spec: containers: - name: nginx image: nginx ports: - containerPort: 80 2 - Create the deployment : kubectl create -f dep.</description></item><item><title>RingZer0CTF Sysadmin Track</title><link>https://chxmxii.github.io/portfolio/posts/2022/04/ringzer0ctf-sysadmin-track/</link><pubDate>Wed, 20 Apr 2022 00:00:00 +0000</pubDate><guid>https://chxmxii.github.io/portfolio/posts/2022/04/ringzer0ctf-sysadmin-track/</guid><description>SysAdmin Part 1 ┌──(kali㉿kali)-[~] └─$ sshpass -p VNZDDLq2x9qXCzVdABbR1HOtz ssh -o StrictHostKeyChecking=no morpheus@challenges.ringzer0team.com -p 10089 Warning: Permanently added &amp;#39;[challenges.ringzer0team.com]:10089&amp;#39; (ED25519) to the list of known hosts. 888888ba oo d8888888P a8888a d888888P 88 8b .d8&amp;#39; d8 8b 88 88aaaa8P dP 88d888b. .d8888b. .d8&amp;#39; .d8888b. 88d888b. 88 P 88 88 .d8888b. .d8888b. 88d8b.d8b. 88 8b. 88 88 88 88 88 .d8&amp;#39; 88ooood8 88 88 88 d 88 88 88ooood8 88 88 88 88 88 88 88 88 88 88 88 88 d8&amp;#39; 88.</description></item><item><title>Bypassing common jinja2 filters</title><link>https://chxmxii.github.io/portfolio/posts/2021/08/bypassing-common-jinja2-filters/</link><pubDate>Thu, 19 Aug 2021 00:00:00 +0000</pubDate><guid>https://chxmxii.github.io/portfolio/posts/2021/08/bypassing-common-jinja2-filters/</guid><description>What is SSTI? SSTI is an injection vulnerability, similar to other injection vulnerabilities it occurs when unsanitized user input is directly processed by the application or more specifically the template engine.
Depending on the template engine being used the impact can vary, some of the issues range from:
Data exposure (application secrets) Cross Site Scripting Remote Code execution String filters</description></item></channel></rss>